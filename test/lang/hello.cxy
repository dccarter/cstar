/**
 * Simplicity
 */

pub native type FILE;
pub native var stdin: &FILE
pub native var stdout: &FILE

pub native func puts(str: string) : i32;
pub native func fputs(str: string, stream: &FILE) : i32;
pub native func fgets(data: &char, size: i32, stream: &FILE) : &char;

pub func println(str: string) => puts(str)

@inline
func allocSlice[T](n: u64) => <[T]> __builtin_alloc_slice(#[T], n)

@inline
func reallocSlice[T](data: [T], n: u64) => <[T]> __builtin_realloc_slice(#[T], data, n)

struct Vector[T] {
    - data: [T]
    - len: u64
    - capacity: u64

    func `new`(initialCapacity: u64) {
        data = allocSlice[T](initialCapacity)
        len = 0
        capacity = initialCapacity
    }

    func push(item: T) {
        grow()
        data.[len++] = item
    }

    func `..`(cb: func(item: T) -> void) {
        var i = 0;
        while(i < len)
            cb(data.[i++])
    }

    - func grow() {
        if (len == capacity) {
            const newSize = capacity + capacity / 2;
            data = reallocSlice[T](data, newSize)
        }
    }
}

func main(args: [string]) {
    var arr = new Vector[i32, u8](10);
    arr.push(10)
    arr.push(20)
    arr.push(100)
    for (const x: arr) {
        println(f"${x}")
    }

    delete arr
}
