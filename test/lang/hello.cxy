/*
 * A simple bank
 */
//interface Iterator[T] {
//    func next() : T
//}

@[json]
struct Account {
    @[json]
    - balance: f32 = 0

    func deposit(amount: f32) => balance += amount;

    func withdraw(amount: f32) {
        assert(balance >= amount)
        balance -= amount
        return balance
    }
}

struct Bank {
    struct iterator : Iterator[&const Account] {
        - accounts: &const Account
        - index: u32 = 0

        func next(): &const Account {
            if(index < accounts.size())
                return accounts.[index++]
            return null
        }
    }

    - type Accounts = map[string, Account]
    - accounts: Accounts

    func create(name: string, balance: f32) : &const Account {
        assert(accounts.find(name) == null)
        return &accounts.emplace(name, balance).1
    }

    func close(name: string) : f32 {
        if (const account = accounts.find(name)) {
            const balance = account.getBalance();
            account.erase(name)
            return balance
        }
        return 0
    }

    func `[]`(name: string) => accounts.get(name);
    func `..`() => iterator{accounts: accounts};
}

func main() {
    var bank = new Bank();
    for (const account: bank) {
        println(account.getBalance())
    }
}