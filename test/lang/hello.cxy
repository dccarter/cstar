/**
 * Simplicity
 */

pub native type FILE;
pub native var stdin: &FILE
pub native var stdout: &FILE

pub native func puts(str: string) : i32;
pub native func fputs(str: string, stream: &FILE) : i32;
pub native func fgets(data: &char, size: i32, stream: &FILE) : &char;

pub func println(str: string) => puts(str)

@inline
func allocSlice[T](n: u64) => <[T]> __builtin_alloc_slice(#[T], n)

@inline
func reallocSlice[T](data: [T], n: u64) => <[T]> __builtin_realloc_slice(#[T], data, n)


struct Vector[T] {
    - data: [T]
    - len: u64
    - capacity: u64

    func `new`(initialCapacity: u64) {
        data = allocSlice[T](initialCapacity)
        len = 0
        capacity = initialCapacity
    }

    func push(item: T) {
        grow()
        data.[len++] = item
    }

    func `[]`(index: u64) {
        assert(index < len)
        return data.[index]
    }

    func `[]=`(index: u64, item: T) {
        assert(index < len)
        return data.[index] = item
    }

    func `..`(cb: func(item: T) -> void) {
        var i = 0;
        while(i < len)
            cb(data.[i++])
    }

    - func grow() {
        if (len == capacity) {
            const newSize = capacity + capacity / 2;
            data = reallocSlice[T](data, newSize)
        }
    }
}

struct OStream {
    fp: &FILE

    func `<<`[T](x: T) {
        fputs(f"${x}", fp)
        return this
    }
}

struct Base {
    x: i32
}

struct Child : Base {
    func `str`() { puts(f"${x}")}
}

func main(args: [string]) {
    var os = OStream{fp: stdout};
    os << 10 << 10
    os << 10
}
