
#const PI = 3.14159265359
#const SOLAR_MASS = 4 * #{PI} * #{PI}
#const DAYS_PER_YEAR = 365.24

pub extern func sqrt(x: f32) : f32;

struct Body {
    x: f64
    y: f64
    z: f64
    vx: f64
    vy: f64
    vz: f64
    mass: f64

    func offsetMomentum(px: f64, py: f64, pz: f64) {
        x = -px / #{SOLAR_MASS}
        y = -py / #{SOLAR_MASS}
        z = -pz / #{SOLAR_MASS}
    }

    const func `hash`() :Hash => 0
    const func `str`(sb: String) {
    }
}

func bodiesEnergy(bodies: [&Body], count: u64) {
    var dx = 0.0;
    var dy = 0.0;
    var dz = 0.0;
    var dist = 0.0;
    var e = 0.0;

    for (const i: 0..count) {
        var body0 = bodies.[i];
        e += (0.5 * body0.mass * (
            body0.vx * body0.vx +
            body0.vy * body0.vy +
            body0.vz * body0.vz
        ))

        for (const j: i+1..count) {
            var body1 = bodies.[j];

            dx = body0.x - body1.x
            dy = body0.y - body1.y
            dz = body0.z - body1.z

            dist = sqrt(dx * dx + dy * dy + dz * dz)
            e -= (body0.mass * body1.mass)/dist
        }
    }

    return e
}

func bodiesAdvance(bodies: [&Body], count: u64, dt: f64) {
    for (const i: 0..count) {
        var body0 = bodies.[i];

        for (const j: i+1..count) {
            var body1 = bodies.[j];

            var dx = body0.x - body1.x;
            var dy = body0.y - body1.y;
            var dz = body0.z - body1.z;

            var dsquared = dx * dx + dy * dy + dz * dz;
            var distance = sqrt(dsquared);
            var mag = dt / (dsquared * distance);

            body0.vx -= dx * body1.mass * mag;
            body0.vy -= dy * body1.mass * mag;
            body0.vz -= dz * body1.mass * mag;

            body1.vx += dx * body0.mass * mag;
            body1.vy += dy * body0.mass * mag;
            body1.vz += dz * body0.mass * mag;
        }
    }

    for (const i: 0..count) {
        var b = bodies.[i];
        b.x += dt * b.vx;
        b.y += dt * b.vy;
        b.z += dt * b.vz;
    }
}

pub func main() {

    var jupiter = Body{
        x: 4.84143144246472090e+00,
        y: -1.16032004402742839e+00,
        z: -1.03622044471123109e-00,
        vx: #{DAYS_PER_YEAR} * 1.66007664274403694e-03,
        vy: #{DAYS_PER_YEAR} * 7.69901118419740425e-03,
        vz: #{DAYS_PER_YEAR} * -6.90460016972063023e-05,
        mass: #{SOLAR_MASS} * 9.54791938424326609e-04
    };

    var saturn = Body{
        x: 8.34336671824457987e+00,
        y: 4.12479856412430479e+00,
        z: -4.03523417114321381e-01,
        vx: #{DAYS_PER_YEAR} * -2.76742510726862411e-03,
        vy: #{DAYS_PER_YEAR} * 4.99852801234917238e-03,
        vz: #{DAYS_PER_YEAR} * 2.30417297573763929e-05,
        mass: #{SOLAR_MASS} * 2.85885980666130812e-04
    };

    var uranus = Body{
        x: 1.28943695621391310e+01,
        y: -1.51111514016986312e+01,
        z: -2.23307578892655734e-01,
        vx: #{DAYS_PER_YEAR} * 2.96460137564761618e-03,
        vy: #{DAYS_PER_YEAR} * 2.37847173959480950e-03,
        vz: #{DAYS_PER_YEAR} * -2.96589568540237556e-05,
        mass: #{SOLAR_MASS} * 4.36624404335156298e-05
    };

    var neptune = Body{
        x: 1.53796971148509165e+01,
        y: -2.59193146099879641e+01,
        z: 1.79258772950371181e-01,
        vx: #{DAYS_PER_YEAR} * 2.68067772490389322e-03,
        vy: #{DAYS_PER_YEAR} * 1.62824170038242295e-03,
        vz: #{DAYS_PER_YEAR} * -9.51592254519715870e-05,
        mass: #{SOLAR_MASS} * 5.15138902046611451e-05
    };

    var sun = Body{
        x: 0.0,
        y: 0.0,
        z: 0.0,
        vx: 0.0,
        vy: 0.0,
        vz: 0.0,
        mass: #{SOLAR_MASS}
    };

    var bodies = [&jupiter, &saturn, &uranus, &neptune, &sun];

    var px = 0.0;
    var py = 0.0;
    var pz = 0.0;

    for(const i: 0..5) {
        var b = bodies.[i];
        px += b.vx * b.mass;
        py += b.vy * b.mass;
        pz += b.vz * b.mass;
    }

    bodies.[0].offsetMomentum(px, py, pz);

    for(const i: 0:i32..50000000) {
        bodiesAdvance(bodies, <u64>5, 1.0e-5);
    }

    for (const i: 0..5) {
        printf("%g\n", bodies.[i].mass)
    }
}
