pub native func memcpy(dst: &void, src: &const void, len: u64) : &void;
pub native func memmove(dst: &void, src: &const void, len: u64) : &void;
pub native func memset(dst: &void, ch: i32, len: u64) : &void;

type HashCode = u32

@alias(name: "hashInit")
pub native func __cxy_builtins_fnv1a_init(): u32;
@alias(name: "hashPointer")
pub native func __cxy_builtins_fnv1a_pointer(init: HashCode, ptr: &const void): u32;
@alias(name: "hashUint8")
pub native func __cxy_builtins_fnv1a_uint8(init: HashCode, val: u8): u32;
@alias(name: "hashUint16")
pub native func __cxy_builtins_fnv1a_uint16(init: HashCode, val: u16): u32;
@alias(name: "hashUint32")
pub native func __cxy_builtins_fnv1a_uint32(init: HashCode, val: u32): u32;
@alias(name: "hashUint64")
pub native func __cxy_builtins_fnv1a_uint64(init: HashCode, val: u64): u32;
@alias(name: "hashBytes")
pub native func __cxy_builtins_fnv1a_bytes(init: HashCode, str: &const void, size: u64): u32;
pub native func __cxy_builtins_fnv1a_string(init: HashCode, str: &const char): u32;
@inline
pub func hashString(init: HashCode, str: string) => __cxy_builtins_fnv1a_string(init, unchecked!(str, #&const char))
@inline
pub func hashStringSize(init: HashCode, str: string, len: u64) => __cxy_builtins_fnv1a_bytes(init, unchecked!(str, #&const char), len)

@inline
pub func allocSlice[T](count: u64) => <[T]> __builtin_alloc_slice(#[T], count, destructor!(#[T]))

@inline
pub func reallocSlice[T](data: [T], count: u64) => <[T]> __builtin_realloc_slice(#[T], data, count, destructor!(#[T]))

pub native type __cxy_builtins_string_builder_t;

pub native func __cxy_builtins_string_builder_new(): &__cxy_builtins_string_builder_t;
pub native func __cxy_builtins_string_builder_delete(this: &__cxy_builtins_string_builder_t) : void;
pub native func __cxy_builtins_string_builder_release(this: &__cxy_builtins_string_builder_t) : &char;

pub native func __cxy_builtins_string_builder_append_cstr0(
                    this: &__cxy_builtins_string_builder_t, str:  &const i8, len:  u64) : void;
pub native func __cxy_builtins_string_builder_append_int(
                    this: &__cxy_builtins_string_builder_t, num: i64) : void;
pub native func __cxy_builtins_string_builder_append_float(
                    this: &__cxy_builtins_string_builder_t, num: f64) : void;
pub native func __cxy_builtins_string_builder_append_char(
                    this: &__cxy_builtins_string_builder_t, ch: wchar): void;
pub native func __cxy_builtins_string_builder_append_bool(
                    this: &__cxy_builtins_string_builder_t, val: bool): void;

pub func hash[T](val: T) {
    #if (#T == #string) {
        return hashString(hashInit(), val)
    }
    else #if (#T == #i8 || #T == #u8) {
        return hashUint8(hashInit(), <u8>val)
    }
    else #if (#T == #i16 || #T == #u16) {
        return hashUint16(hashInit(), <u16>val)
    }
    else #if (#T == #i32 || #T == #u32) {
        return hashUint32(hashInit(), <u32>val)
    }
    else #if (#T == #i64 || #T == #u64) {
        return hashUint64(hashInit(), <u64>val)
    }
    else {
        // this will fail if T does not implement hash function
        return val.hash()
    }
}

pub struct StringBuilder {
    - sb: &__cxy_builtins_string_builder_t

    @inline
    func `new`() : void =>  sb = __cxy_builtins_string_builder_new()

    @inline
    func `delete`() => __cxy_builtins_string_builder_delete(sb)

    @inline
    func appendString(str: string) =>
        __cxy_builtins_string_builder_append_cstr0(sb, unchecked!(str, #&const i8), len!(str))

    @inline
    func appendInt(num: i64) =>
        __cxy_builtins_string_builder_append_int(sb, <i64> num)

    @inline
    func appendFloat(num: f64) =>
        __cxy_builtins_string_builder_append_float(sb, <f64> num)

    @inline
    func appendChar(ch: wchar) =>
        __cxy_builtins_string_builder_append_char(sb, ch)


    @inline
    func appendBool(val: bool) =>
        __cxy_builtins_string_builder_append_bool(sb, val)

    @inline
    func `<<`[U](val: U) {
        #if (U.isString)
            appendString(val)
        else #if (U.isInteger)
            appendInt(<i64>val)
        else #if (U.isFloat)
            appendFloat(val)
        else #if (U.isBoolean)
            appendBool(val)
        else #if (#U == #wchar)
             appendChar(val)
        else
            val.toString(this)
        return this
    }

    @inline
    func toString() {
        var ret = __cxy_builtins_string_builder_release(sb);
        return unchecked!(ret, #string)
    }

    @inline
    func toString(dst: &StringBuilder) {
         dst.appendString(this.toString())
    }

    @inline
    func `str`() => this.toString()
}

pub struct PtrRef[T] {
    ptr: &T = null
    @inline
    func `deref`() => *ptr
    func `!!`() => ptr!(ptr) != ptr!(null)
}

pub struct Optional[T] {
    valid: bool = false
    val: T

    @inline
    func `new`(val: T) {
        this.val = val
        valid = true
    }

    @inline
    func `new`() {
        valid = false
    }

    @inline
    func `!!`() => valid

    @inline
    func `deref`() => val

    @inline
    func toString(sb: StringBuilder) {
        if (valid) {
            sb << "Some(" << val << ")"
        }
        else {
            sb << "None()"
        }
    }

    @inline
    func `str`() => valid? f"Some(${val})" : "None()";
}

@inline
pub func None[T]() => Optional[T]{valid: false}

@inline
pub func Some[T](val: T) => Optional[T]{valid: true, val: val}
