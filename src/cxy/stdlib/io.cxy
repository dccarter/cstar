module io

import "./c.cxy" as C

pub func print[T](it: const T) {
    @flatten
    #if (T.isString) {
        @flatten
        #if (T.isStruct) {
            C.write(C.STDOUT, it.str, it.count)
        }
        else {
            C.write(C.STDOUT, it: string, len!(it))
        }
    }
    else {
        var j;
        var str = f"${it}";
        C.write(C.STDOUT, str.str, str.count)
    }
}

@inline
pub func println(@transient ...args: const auto) {
    #const i = 0;

    @flatten
    #for (const T: args) {
        print[#{T}](args.#{i})
        #{i += 1}
    }

    C.write(C.STDOUT, "\n" : &const char, 1)
}

struct File {
    fd: i32 = -1

    @inline
    func `init`(fd: i32) {
        this.fd = fd
    }

    func read(data: &void, size: u64) : u64? {
        if (fd == -1)
            return null

        var bytes = C.read(fd, data, size);
        if (bytes == -1)
            return null

        return <u64>bytes;
    }

    func read(data: &void, size: u64, off: i64) : u64? {
        if (fd == -1)
            return null

        if (C.lseek(fd, off, C.SEEK_SET) == -1)
            return null

        var bytes = C.read(fd, data, size);
        if (bytes == -1)
            return null

        return <u64>bytes;
    }

    @inline
    func `!!`() => fd != -1

    @inline
    func seek(off: u64, whence: i32 = C.SEEK_SET) => C.lseek(fd, off:i64, whence)

    const func `str`(sb: StringBuilder) => {}
    const func `hash`() => fd
}
