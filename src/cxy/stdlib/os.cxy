module os

import { State } from "./coro.cxy"

import "errno.h" as errno
import "stdlib.h" as stdlib
import "unistd.h" as unistd
import "sys/wait.h" as syswait

import "native/nos.h" as nos
import "./native/index.cxy"

##if (defined MACOS) {
import "sys/_types/_pid_t.h" as pid_t
}
else {
import "sys/types.h" as types
import "sys/pidfd.h" as pidfd
}

#if (defined MACOS) {
pub type Pid = pid_t.pid_t
}
else {
pub type Pid = types.pid_t
}

pub type Stat = nos.Stat

@inline
pub func stat(path: string, s: ^nos.Stat) => nos.fs_stat(path !: ^const char, s)
@inline
pub func fstat(fd: i32, s: ^nos.Stat) => nos.fs_fstat(fd, s)
@inline
pub func lstat(path: string, s: ^nos.Stat) => nos.fs_lstat(path !: ^const char, s)

pub exception IOError(msg: String) => msg == null? "": msg.str()

macro _W_INT(x)      *(<^i32>(ptrof x!))
macro _WSTATUS(x)    =(_W_INT!(x!) & 0177)
macro WIFEXITED(x)   =(_WSTATUS!(x!) == 0)
macro WEXITSTATUS(x) =((_W_INT!(x!) >> 8) & 0x000000ff)

pub struct FileDescriptor {
    fd: i32 = -1

    func read(data: ^void, size: u64) : u64? {
        if (fd == -1)
            return null

        var bytes = unistd.read(fd, data, size);
        if (bytes == -1)
            return null

        return <u64>bytes;
    }

    func read(data: ^void, size: u64, off: i64) : u64? {
        if (fd == -1)
            return null

        if (unistd.lseek(fd, off, SEEK_SET!) == -1)
            return null

        var bytes = unistd.read(fd, data, size);
        if (bytes == -1)
            return null

        return <u64>bytes;
    }

    func readAll(): !String {
        var buf: [char, 4092] = []
        var str = String();
        while (true) {
            var tmp = unistd.read(fd, buf, 4092)
            if (tmp == 0)
                return &&str
            if (tmp < 0)
                raise IOError(f"reading command output failed: ${strerror(errno!)}")
            str.append(buf, tmp)
        }
    }

    @inline
    func `!!`() => fd != -1

    @inline
    func seek(off: u64, whence: i32 = SEEK_SET!) => unistd.lseek(fd, <i64>off, whence)
}

pub struct Process {
    - out = FileDescriptor{};
    - err = FileDescriptor{};
    - input  = -1:i32;
    - _pid: Pid = 0;

    func `init`(pid: Pid, out: i32 = -1, err: i32 = -1, input: i32 = -1) {
        _pid = pid
        this.out = FileDescriptor{fd: out}
        this.err = FileDescriptor{fd: err}
        this.input = input
    }

    func wait(): !i32 {
        var status:i32 = 0;
        const ret = syswait.waitpid(_pid, ptrof status, 0)
        if (ret < 0)
            raise IOError(f"wait for pid ${_pid} failed: ${strerror(errno!)}")

        if (WIFEXITED!(status)) {
            return WEXITSTATUS!(status)
        }
        return -1:i32
    }

    func waitAsync(): !i32 {
        #if (defined MACOS) {
            warn!("Process::waitAsync is not defined for MACOS yet")
            raise IOError("Process::waitAsync is not defined for MACOS yet")
        }
        else {
            const pidFd = pidfd.pidfd_open(_pid, PIDFD_NONBLOCK!);
            if (pidFd < 1) {
                if (errno! == EINVAL!)
                    return -(<i32>EINVAL!)
                raise IOError(f"wait for pid ${_pid} failed: ${strerror(errno!)}")
            }

            defer unistd.close(pidFd)
            var status:i32 = 0;
            var ret = syswait.waitpid(_pid, ptrof status, WNOHANG!);
            if (ret < 0)
                raise IOError(f"wait for pid ${_pid} failed: ${strerror(errno!)}")
            if (ret == 0) {
                fdWaitRead(pidFd)
                ret = syswait.waitpid(_pid, ptrof status, WNOHANG!)
                if (ret < 0)
                    raise IOError(f"wait for pid ${_pid} failed: ${strerror(errno!)}")
            }

            if (WIFEXITED!(status)) {
                return WEXITSTATUS!(status)
            }
            return -1:i32
        }
    }
}

pub func execvpe(cmd: string, argv: [string], env: [(string, string)]): !Process {
    var input:[i32, 2] = []
    var out:[i32, 2] = []
    var err:[i32, 2] = []

    const sz = argv.size()
    if (sz < 2 || argv.[sz-1] != null)
        raise IOError("arguments `argv` must be null terminated and argv[0] must be the command")
    if (__string(cmd) != __string(argv.[0]))
        raise IOError("first entry of `argv` must be the same as the command name")

    if (unistd.pipe(input) != 0)
        raise IOError(f"opening process input stream failed: ${strerror(errno!)}")
    if (unistd.pipe(out) != 0)
        raise IOError(f"opening process output stream failed: ${strerror(errno!)}")
    if (unistd.pipe(err) != 0)
        raise IOError(f"opening process error stream failed: ${strerror(errno!)}")

    var pid = unistd.fork();
    if (pid == -1)
        raise IOError(f"creating a process failed: ${strerror(errno!)}")

    if (pid == 0) {
        // Child process
        unistd.dup2(input.[1], STDIN_FILENO!)
        unistd.dup2(out.[1], STDOUT_FILENO!)
        unistd.dup2(err.[1], STDERR_FILENO!)
        unistd.close(input.[0])
        unistd.close(out.[0])
        unistd.close(err.[0])
        for (const x, _: env)
            stdlib.setenv(x.0 !: ^const char, x.1 !: ^const char, 1)
        var ret = unistd.execvp(cmd !: ^const char, argv.data !: ^^const char)
        raise IOError(f"starting ${cmd} failed: ${strerror(errno!)}")
        stdlib.exit(ret)
    }
    else if (pid > 0) {
        unistd.close(input.[1])
        unistd.close(out.[1])
        unistd.close(err.[1])
        return Process(pid, out.[0], err.[0], input.[0])
    }
    raise IOError(f"forking process failed: ${strerror(errno!)}")
}

@[inline]
pub func execvp(cmd: string, argv: Slice[string]): !Process {
    var env = Slice[(string, string)](null, 0);
    return execvpe(cmd, argv, env)
}

pub func execlp(cmd: string, ...args: string): !Process {
    var env = Slice[(string, string)](null, 0);
    #const sz = len!(args) + 2
    var argv: [string, #{sz}] = [];
    argv.[0] = cmd
    #const i = 1
    #for (const arg: args) {
        argv.[#{i}] = #{arg}
        #{i += 1}
    }
    argv.[#{sz -1 }] = null
    return execvpe(cmd, argv, env)
}

pub func execlpe(cmd: string, env: [(string, string)], ...args: string): !Process {
    #const sz = len!(args) + 2
    var argv: [string, #{sz}] = [];
    argv.[0] = cmd
    #const i = 1
    #for (const arg: args) {
        argv.[#{i}] = #{arg}
        #{i += 1}
    }
    argv.[#{sz -1 }] = null
    return execvpe(cmd, argv, env)
}

pub func capture(cmd: string, ...args: auto): !Process {
    #if (len!(args)) {
        var env = Slice[(string, string)](null, 0);
        var argv: [string, #{len!(args) + 2}] = [];
        #const hasEnv = false;
        #const argc = 1;
        argv.[0] = cmd
        #for (const arg: args) {
            require!(!hasEnv, "environment variables must be the last argument")
            #const T = typeof!(#{arg})
            #if (T.isStruct) {
                var _env: [(string, string), #{T.membersCount}] = [];
                #const i = 0
                #for (const M: T.members) {
                    #if (M.isField) {
                        _env.[#{i}] = (#{M.name}, #{arg}.#{mk_ident!(M.name)})
                        #{i += 1}
                    }
                }
                env = Slice[(string, string)](_env, #{i})
                #{hasEnv = true}
            }
            else #if (T.isArray) {
                env = Slice[(string, string)](#{arg}, len!(#{arg}))
                #{hasEnv = true}
            }
            else #if (T.isSlice) {
                env = #{arg}
                #{hasEnv = true}
            }
            else {
                require!(T.isString, "unsupported argument of type '{t}', argument must be of string type", #T)
                #if (T.isClass || T.isStruct)
                    argv.[#{argc}] = #{arg}.str()
                else
                    argv.[#{argc}] = #{arg}
                #{argc += 1}
            }
        }
        argv.[#{argc}] = null
        return execvpe(cmd, argv, env)
    }
    else {
        return execvpe(cmd, [cmd, null], Slice[(string, string)](null, 0))
    }
}

pub func shell(cmd: string, ...args: string): !Process {
    #if (len!(args)) {
        var env = Slice[(string, string)](null, 0);
        var s = String(cmd);
        #const hasEnv = false
        #for (const arg: args) {
            require!(!hasEnv, "environment variables must be the last argument")
            #const T = typeof!(#{arg})
            #if (T.isStruct) {
                var _env: [(string, string), #{T.membersCount}] = [];
                #const i = 0
                #for (const M: T.members) {
                    #if (M.isField) {
                        _env.[#{i}] = (#{M.name}, #{arg}.#{mk_ident!(M.name)})
                        #{i += 1}
                    }
                }
                env = Slice[(string, string)](_env, #{i})
                #{hasEnv = true}
            }
            else #if (T.isArray) {
                env = Slice[(string, string)](#{arg}, len!(#{arg}))
                #{hasEnv = true}
            }
            else #if (T.isSlice) {
                env = #{arg}
                #{hasEnv = true}
            }
            else {
                s << " " << #{arg}
            }
        }
        return execlpe("sh", env, "-c", s.str())
    }
    else
        return execlpe("sh",  Slice[(string, string)](null, 0), "-c", cmd)
}

pub func execute[T](
    cmd: string,
    @unused env: T
): !i32 {
    require!(T.isStruct || T.isSlice || T.isArray,
        "type {t} must be struct whose fields are environment variables or a slice/array of type [(string, string)]",
        #T)
    const pid = unistd.fork();
    if (pid == -1)
        raise IOError(f"creating a process failed: ${strerror(errno!)}")

    if (pid == 0) {
        var argv = [ "sh", "-c", cmd, null ]
        // Child process
        #if (T.isStruct) {
            #for(const M: T.members) {
                #if (M.isField && M.Tinfo == #string)
                    stdlib.setenv(#{M.name} !: ^const char,
                                  env.#{mk_ident!(M.name)} !: ^const char, 1)
            }
        }
        else {
            for (const x,_: env)
                stdlib.setenv(x.0 !: ^const char, x.1 !: ^const char, 1)
        }

        var ret = unistd.execvp("sh" !: ^const char, argv !: ^^const char)
        raise IOError(f"starting ${cmd} failed: ${strerror(errno!)}")
        stdlib.exit(ret)
    }
    else if (pid > 0) {
        return Process(pid).wait()
    }
    raise IOError(f"forking process failed: ${strerror(errno!)}")
}

macro sh(cmd, ...env) os.execute(cmd!, varargs_def!(env!, {}))

