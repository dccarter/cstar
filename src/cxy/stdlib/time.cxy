module time

##if (defined MACOS) {
    import "_time.h" as ctime
    import "sys/_types/_time_t.h" as _time_t
}
else {
    import "time.h" as ctime
    import "bits/types/time_t.h" as _time_t
    import "bits/types/struct_tm.h" as struct_tm
}

macro HTTP_TIME_FMT "%a, %d %b %Y %T GMT";
macro LOG_TIME_FMT  "%Y-%m-%d %H:%M:%S";

#if (defined MACOS) {
type tm = ctime.tm
}
else {
type tm = struct_tm.tm
}

pub type time_t = _time_t.time_t

pub struct Time {
    - _t: time_t
    - _tm: tm

    func `init`(t: time_t) {
        _t = t
        ctime.gmtime_r(ptrof _t, ptrof _tm)
    }

    func `init`() {
        _t = ctime.time(null)
         ctime.gmtime_r(ptrof _t, ptrof _tm)
    }

    func `init`(str: string, fmt: string = HTTP_TIME_FMT!) {
        ctime.strptime(str !: ^const char, fmt !: ^const char, ptrof _tm)
        _t = ctime.mktime(ptrof _tm)
    }

    const func format(fmt: string, os: &OutputStream) {
        if (fmt.[0] != '\0':char) {
            var buf: [char, 512];
            var sz = ctime.strftime(buf, 512, fmt !: ^const char, ptrof _tm);
            os.append(buf, sz)
        }
    }

    @inline
    const func `str`(os: &OutputStream) {
        format(HTTP_TIME_FMT!, os)
    }

    @inline
    const func timestamp() { return _t }
}