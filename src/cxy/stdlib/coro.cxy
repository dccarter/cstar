module coro

import "setjmp.h" as jmp
import "unistd.h" as unistd
import "sys/mman.h" as vmem
import "native/evloop/ae.h" as ae

import { List } from "./list.cxy"

import "./native/index.cxy"

type Context = ^jmp.sigjmp_buf
type Stack = ^void

pub type State = ae.State

#if (defined __x86_64) {

macro __cxy_coro_setjmp(ctx) =({
    var ret: i32 = 0;
    @volatile asm("""
        lea LJMPRET$=(%rip), %rcx
        xor $0, $0
        movq %rbx,   ($1)
        movq %rbp,  8($1)
        movq %r12, 16($1)
        movq %r13, 24($1)
        movq %r14, 32($1)
        movq %r15, 40($1)
        movq %rsp, 48($1)
        movq %rcx, 56($1)
        LJMPRET$=:
        """ :
        "=&r"(ret) :
        "r" (ctx!) :
        "memory", "rcx", "rsi", "rdi", "r8", "r9", "r10", "r11", "cc"
    )
    ret;
})

macro __cxy_coro_longjmp(ctx) {
    @volatile asm("""
        movq    $$1, %rdx
        movq 56($0), %rcx
        movq 48($0), %rsp
        movq 40($0), %r15
        movq 32($0), %r14
        movq 24($0), %r13
        movq 16($0), %r12
        movq  8($0), %rbp
        movq   ($0), %rbx
        .cfi_def_cfa %rdx, 0
        .cfi_offset %rbx, 0
        .cfi_offset %rbp, 8
        .cfi_offset %r12, 16
        .cfi_offset %r13, 24
        .cfi_offset %r14, 32
        .cfi_offset %r15, 40
        .cfi_offset %rsp, 48
        .cfi_offset %rip, 56
        jmp    *%rcx
        """ ::
        "r"(ctx!) :
        "rdx"
    )
}

macro __cxy_coro_setsp(x) {
    asm(""::"r"(alloca!(#u64)))
    @volatile asm("leaq (%rax), %rsp" :: "rax"(x!))
}

}

@align(16)
struct Coroutine {
    link: ^This = null;
    id: i32 = -1;
    result: i32 = 0;
    /* When the coroutine is suspended 'ctx' holds the context (registers and such).*/
    ctx: jmp.sigjmp_buf
    ready : bool = false; /* Set when the coroutine has finished its execution. */
    promise: ^void = null
    name: string = null

    #if (defined CORO_VALGRIND) {
        /*
         * Valgrind stack identifier. This way, valgrind knows which areas of
         * memory are used as stacks, and so it doesn't produce spurious warnings.
         * Well, sort of. The mechanism is not perfect, but it's still better
         * than nothing.
         */
        sid: i32 = -1;
    }

    func `init`(name: string = null, id: i32 = -1) {
        this.name = name
        this.id = id
    }
}

@inline
func stackAlign(size: u64, align: u64) =>
    ((size + (align - 1)) & ~(align - 1)) + align

#if (! defined CORO_STACK_SIZE) {
    // 256kb stack by default
    macro CORO_STACK_SIZE() 256:u64 * 1024:u64
}

var stackSize = stackAlign(CORO_STACK_SIZE!, unistd.sysconf(<i32> _SC_PAGE_SIZE!));

struct CachedStack {
    link: ^This
}

macro MAX_CACHED_STACKS 32:u64

class CoroutineScheduler {
    running: ^Coroutine = null; /* Currently running coroutine. */
    /* List of coroutines ready for execution. */
    - ready = List[Coroutine]{};
    /* Coroutine that we don't launch */
    - main = Coroutine("main", -1);
    /* Cache some stacks */
    - stacks = List[CachedStack]{};
    /* Coroutine ID generator */
    - idGenerator: i32 = 0;
    /* Counter used in rescheduling coroutines */
    - counter : i32 = 0;
    /* Event loop for handling IO events */
    - eventLoop : ^ae.aeEventLoop = null;

    func `init`() {
        // by default the running coroutine should be main
        running = ptrof main
        eventLoop = ae.aeCreateEventLoop(this !: ^void, 1024);
    }

    - func allocStack() {
        var ptr: ^void = null;
        var stack = stacks.pop();
        if (stack != null) {
            ptr = (stack !: ^void);
        }
        else {
            ptr = vmem.mmap(
                null,
                stackSize,
                PROT_READ! | PROT_WRITE!,
                MAP_PRIVATE! | MAP_ANONYMOUS!,
                -1,
                0
            );
        }
        var top = (ptr !: ^u8) + stackSize;
        return top !: ^void
    }

    - func freeStack(ptr: ^void) {
        if (stacks.count >= MAX_CACHED_STACKS!) {
            // delete the oldest stack
            var stack = stacks.pop();
            vmem.munmap(stack !: ^void, stackSize)
        }
        else {
            // cache the stack
            var base = (ptr !: ^u8) + (-stackSize);
            stacks.push(base !: ^CachedStack);
        }
    }

    @inline
    - func eventLoopWait(timeout: i64 = -1) {
        ae.aeProcessEvents(
            eventLoop,
            ae.Flags.AE_FILE_EVENTS | ae.Flags.AE_TIME_EVENTS,
            timeout
        )
    }

    @[static]
    func eventLoopCallback(loop: ^ae.aeEventLoop, @unused fd: i32, arg: ^void, mask: i32) {
        // resume the coroutine waiting for the event
        var scheduler = &(loop.context !: This);
        var cr = arg !: ^Coroutine;
        // printf("    fev(%p, %s:%p)\n", scheduler.running, cr.name, cr)
        scheduler.resume(cr, mask)
    }

    @[static]
    func eventLoopTimerFired(loop: ^ae.aeEventLoop, id: i64, arg: ^void): ae.Status {
        // resume the coroutine waiting for the timer
        var scheduler = loop.context !: This;
        var cr = arg !: ^Coroutine;
        scheduler.resume(cr, <i32>id)
        return ae.Status.AE_NO_MORE;
    }

    func suspend() : i32 {
        if(counter >= 103) {
            eventLoopWait(0)
            counter = 0
        }

        if (running != null) {
            if (__cxy_coro_setjmp!(ptrof this.running.ctx)) {
                return running.result
            }
        }

        while (true) {
            var coro = ready.pop();
            if (coro != null) {
                counter++;
                assert!(coro.ready)
                coro.ready = false
                running = coro
                __cxy_coro_longjmp!(ptrof coro.ctx)
            }

            eventLoopWait();
            counter = 0;
        }
        return 0;
    }

    func resume(cr: ^Coroutine, res: i32): void {
        cr.ready = true;
        cr.result = res
        ready.push(cr)
    }

    func yld() {
        resume(running, 0)
        suspend()
    }

    func prologue(name: string, @unused file: string, @unused line: u64) {
        var stack = allocStack();
        var cr = ptroff!((stack !: ^Coroutine) + (-1));
        cr.link = null
        cr.id = idGenerator++
        cr.ready = false;
        cr.name = name
        resume(running, 0)
        running = cr
        return cr
    }

    func epilogue() {
        var cr = running;
        var sp = ptroff!(cr + 1);
        running = null
        freeStack(sp !: ^void)

        suspend()
    }

    func fdWaitWrite(fd: i32, timeout: u64) {
        var status = ae.aeCreateFileEvent(
            eventLoop,
            fd,
            ae.State.AE_WRITABLE,
            eventLoopCallback,
            running !: ^void,
            timeout
        );
        if (status == ae.Status.AE_OK) {
            // suspend the current coroutine
            var result = suspend();
            ae.aeDeleteFileEvent(eventLoop, fd, ae.State.AE_WRITABLE)
            return result
        }
        return status
    }

    func fdWaitRead(fd: i32, timeout: u64) {
        var status = ae.aeCreateFileEvent(
            eventLoop,
            fd,
            ae.State.AE_READABLE,
            eventLoopCallback,
            running !: ^void,
            timeout
        );
        if (status == .AE_OK) {
            // suspend the current coroutine
            var result = suspend();
            ae.aeDeleteFileEvent(eventLoop, fd, ae.State.AE_READABLE)
            return result
        }
        return status
    }

    func sleep(ms: i64) {
        if (ms > 0) {
            var status = ae.aeCreateTimeEvent(
                eventLoop,
                ms,
                eventLoopTimerFired,
                running !: ^void,
                null
            );
            assert!(status != .AE_ERR)
            suspend()
        }
    }

    func `deinit`() {
    }
}

// @global installs the variable into the global scope
@[thread, __override_builtin("__scheduler"), linkage("External")]
var __cxy_coro_scheduler = CoroutineScheduler();
macro yld() __scheduler.yld()
macro running() __scheduler.running
macro setname(NAME) { __scheduler.running.name = NAME! }

macro __async(CALL, NAME) {
    if (__cxy_coro_setjmp!(ptrof __scheduler.running.ctx) == 0) {
        var cr = __scheduler.prologue(NAME!, file!, line!);
        __cxy_coro_setsp!(cr !: ^void)
        CALL!
        __scheduler.epilogue()
    }
}

@[inline, __override_builtin("timestamp")]
func __now() => ae.aeOsTime()

@[inline, __override_builtin("evin")]
func __evin(fd: i32, timeout: u64 = 0) => __scheduler.fdWaitRead(fd, timeout)

@[inline, __override_builtin("evout")]
func __evout(fd: i32, timeout: u64 = 0) => __scheduler.fdWaitWrite(fd, timeout)

@[inline, __override_builtin("sleep")]
func __sleep(ms: i64) { __scheduler.sleep(ms) }

@[inline, __override_builtin("istimeout")]
func __istimeout(status: i32) => (status & ae.State.AE_TIMEOUT) == ae.State.AE_TIMEOUT
