module str

pub struct String {
    - s: string
    - len: u64 = 0

    func `new`(s: string = "") {
        this.s = s
        this.len = len!(s)
    }

    func `new`(s: string, size: u64) {
        this.s = s
        this.len = size
    }

    @inline
    func `delete`() {
        if (s != null)
            dealloc(s)
        s = null
    }

    func compare(other: const This) {
        if (len != other.len)
            return <i32>(len - other.len)

        for (const i : 0..len) {
            if (s.[i] != other.s.[i])
                return <i32>s.[i] - <i32>other.s.[i]
        }

        return <i32>0
    }

    func clear() {
        if (s != null)
            dealloc(s)
        s = ""
    }

    func append(other: const This) unsafe {
        var newLen = len + other.len;
        var str = CXY__builtins_alloc(#char, newLen + 1, null) : &char;
        memcpy(str, s: &const char, len)
        memcpy(ptroff!(str + len), other.s: &const char, other.len);
        *(ptroff!(str + newLen)) = <i8>'\0';

        return String(str:string, newLen);
    }

    func append(s: string) unsafe {
        const str = String(s);
        return append(&str)
    }

    @inline
    func `+`(other: const This) {
        var tmp = String(s, len);
        tmp.append(other)
        return tmp
    }

    @inline
    func `==`(other: const This) => compare(other) == 0

    @inline
    func `!=`(other: const This) => compare(other) != 0

    @inline
    func `<`(other: const This) => compare(other) < 0

    @inline
    func `>`(other: const This) => compare(other) > 0

    @inline
    func `<=`(other: const This) => compare(other) <= 0

    @inline
    func `>=`(other: const This) => compare(other) >= 0

    @inline
    func `str`() => s

    @inline
    const func toString(dst: &StringBuilder) => dst.appendString(s)

    @inline
    const func hash() => hashStringSize(hashInit(), s, len)

    @inline
    const func `[]`(idx: i32) => s[idx]

    @inline
    const func toJson(sb: StringBuilder) => sb << '"' << s << '"'

    const func `..`() {
        var i = 0;
        return () : (char, i32)? => {
            if (i < len)
                return (s.[i], i++)
            else
                return null
        }
    }
}
