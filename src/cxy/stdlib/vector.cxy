module vector

const DEFAULT_VECTOR_CAPACITY : u64 = 16;

pub struct Vector[T] {
    - data: [T]
    - len: u64

    - func grow() {
        var capacity = len!(data);
        if (len >= capacity) {
            capacity += (capacity / 2)
            data = reallocSlice[T](data, capacity)
        }
    }

    func `new`(initialSize: u64 = DEFAULT_VECTOR_CAPACITY) {
        data = allocSlice[T](initialSize)
    }

    func push(item: T) {
        grow()
        data.[len++] = item
    }

    func pop() {
        assert!(len > 0)
        len--;
        return data.[len]
    }

    func shift() {
        assert!(len > 0)
        const item = data.[0];
        var tmp = data;
        len -= 1
        memmove(data!(tmp),
                      ptroff!(data!(tmp) + 1),
                      sizeof!(item) * len)
        return item
    }

    func resize(newSize: u64) {
        data = reallocSlice[T](data, newSize)
        if (newSize < len)
            len = newSize
    }

    @inline
    func shrink() => resize(len)

    func `[]`(index: i32) {
        assert!(index < len)
        return data.[index]
    }

    func `[]=`(index: i32, value: T) {
        assert!(index < len!(data))
        data.[index] = value
    }

    func `..`() {
        var i : i64 = 0;
        return () : (&T, i64)? => {
            if (i < len)
                return (&data.[i], i++)
            else
                return null
        }
    }

    const func toString(sb: &StringBuilder) {
        var i = 0;
        sb << '['
        while (i < len) {
            if (i != 0)
                sb << ", "
            sb << data.[i++]
        }
        sb << ']'
    }

    const func `str`() {
        var sb = StringBuilder();
        toString(&sb);
        return sb.toString()
    }
}
