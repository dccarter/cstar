module map

import { Vector } from "stdlib/vector.cxy"

#const DEFAULT_HASH_TABLE_CAPACITY = 4
#const OCCUPIED_MASK  = <u32> 0x80000000
#const MAX_LOAD_FACTOR = 70 // %
#const MIN_PRIME = <u64> 7
#const MAX_PRIME = <u64> 1048583
macro NUM_PRIMES 15

const HASH_PRIMES = [
    #{MIN_PRIME},
    17, 31, 67, 257, 1031, 4093, 8191, 16381,
    32381, 65539, 131071, 262147, 524287,
    #{MAX_PRIME}
];

pub func hashNextPrime(i: u64) {
    var j, k = (0, NUM_PRIMES!);
    while (j < k) {
        var m = (j + k) / 2;
        var p = HASH_PRIMES.[m];
        if (p <= i)
            j = m + 1
        else
            k = m
    }
    return HASH_PRIMES.[k >= NUM_PRIMES! ? (NUM_PRIMES! - 1) : k];
}

@inline
pub func hashModPrime(i: u64, p: u64) => i % p

@inline
pub func incrementWrap(_capacity: u64, index: u64) =>(index + 1 >= _capacity) ? (<u64>0) : index + 1

@inline
pub func isOccupiedHash(hash: u32) => (hash & #{OCCUPIED_MASK}) == #{OCCUPIED_MASK};

@poco
struct HashMapNode[K, V] {
    key: K
    #if (#V != #void) {
        value: V
    }

    func `init`() {}

    @inline
    func `==`(key: K) {
        #if (K.isStruct || K.isClass) {
            return this.key == &key
        }
        else {
            return this.key == key
        }
    }
}

pub class HashMap[K, V] {
    - _data: &HashMapNode[K, V]
    - _hashes: &u32
    - _size: u64 = 0;
    - _capacity: u64 = 0;

    @inline
    - func needsRehash() => _size * 100 >= _capacity * #{MAX_LOAD_FACTOR}

    @inline
    - func isBucketOccupied(bucket: u64) => isOccupiedHash(_hashes.[bucket])

    - func rehash() {
        var newCapacity = hashNextPrime(_capacity);
        if (newCapacity <= _capacity)
            newCapacity = _capacity * 2 + 1;
        var newData = <&HashMapNode[K,V]> __cxy_calloc(sizeof!(#HashMapNode[K,V]) * newCapacity);
        var newHashes = <&u32> __cxy_calloc(sizeof!(#u32) * newCapacity);

        var n = _capacity;
        for (const i: 0..n) {
            const hashCode = _hashes.[i];
            if (!isOccupiedHash(hashCode))
                continue;
            var index = hashModPrime(<u64>hashCode, newCapacity);
            while (isOccupiedHash(newHashes.[index]))
                index = incrementWrap(newCapacity, index);

            newData.[index] = _data.[i]
            //_data.[i] = null
            newHashes.[index] = hashCode;
        }

        __cxy_free(_hashes: &void)
        __cxy_free(_data: &void)
        _hashes = newHashes;
        _data = newData
        _capacity = newCapacity
    }

    @inline
    - func removeAt(key: K, index: u64) {
        var removed: V? = _data.[index].value;

        var next = incrementWrap(_capacity, index);
        while (isBucketOccupied(next)) {
            const nextHash = _hashes.[next];
            const desired = hashModPrime(nextHash, _capacity);
            if (desired <= index || desired > next) {
                _data.[index] = _data.[next]
                _hashes.[index] = nextHash
               index = next
            }
            next = incrementWrap(_capacity, next)
        }
        _hashes.[index] = 0
        _size--

        return removed
    }

    func `init`(_capacity: u64 = #{DEFAULT_HASH_TABLE_CAPACITY}) {
        _capacity = hashNextPrime(_capacity)
        _data = <&HashMapNode[K,V]> __cxy_calloc(sizeof!(#HashMapNode[K,V]) * _capacity)
        _hashes = <&u32> __cxy_calloc(sizeof!(#u32) * _capacity)
        this._capacity = _capacity
    }

    func `deinit`() {
        if (_capacity) {
            for (const i : 0.._capacity) {
                if (isBucketOccupied(i)) {
                    //_data.[i] = null
                }
            }

            __cxy_free(_data: &void)
            __cxy_free(_hashes: &void)
            _size = 0
            _capacity = 0
        }
    }

    func insert(key: K, value: V, replace: bool = true) {
        var hashCode = hash[K](key) | #{OCCUPIED_MASK};
        var index = hashModPrime(hashCode, _capacity);
        while (isBucketOccupied(index)) {
            if (_hashes.[index] == hashCode && _data.[index] == key){
                if (replace)
                    _data.[index].value = value
                return false;
            }
            index = incrementWrap(_capacity, index)
        }

        _data.[index] = HashMapNode[K, V]{key: key, value: value}
        _hashes.[index] = hashCode
        _size++

        if (needsRehash()) {
            rehash()
        }

        return true;
    }

    func get(key: K) : V? {
        const hashCode = hash[K](key) | #{OCCUPIED_MASK};
        var index = hashModPrime(hashCode, _capacity);
        while (isBucketOccupied(index)) {
            if (_hashes.[index] == hashCode && _data.[index] == key)
                return _data.[index].value;
            index = incrementWrap(_capacity, index)
        }
        return null
    }

    func remove(key: K) : V? {
        const hashCode = hash[K](key) | #{OCCUPIED_MASK};
        var index = hashModPrime(hashCode, _capacity);
        var found = false;
        while (isBucketOccupied(index)) {
            if (_hashes.[index] == hashCode && _data.[index] == key) {
                return removeAt(key, index)
            }
            index = incrementWrap(_capacity, index)
        }

        return null
    }

    func clear() {
        if (_size == 0)
            return;

        for (const i : 0.._capacity) {
            if (isBucketOccupied(i)) {
                //_data.[i] = null
            }
        }

        memset(_hashes: &void, 0, sizeof!(#u32)*_capacity)
        _size = 0
    }

    @inline
    func `[]`(key: K) => get(key)

    @inline
    func `[]=`(key: K, value: V) => insert(key, value)

    func `..`() {
        var i = 0;
        return () : (K, V)? => {
            while (i < _capacity) {
                if (isOccupiedHash(_hashes.[i]))
                    return (_data.[i].key, _data.[i++].value)
                i++
            }
            return null
        }
    }

    func each(fun: func(key: K, value: V) -> void) {
        var i = 0;
        while (i < _capacity) {
            if (isOccupiedHash(_hashes.[i]))
                fun(_data.[i].key, _data.[i].value)
            i++
        }
    }

    func map[U](transform: func(key: K, value: V) -> U) {
        var output = Vector[U]();
        this.each((key: K, value: V) => { output.push(transform(key, value)) })
        return output
    }

    const func `str`(sb: String) {
        sb << "{"
        var i = 0;
        var first = true;

        while (i < _capacity) {
            if (isOccupiedHash(_hashes.[i])) {
                if (!first)
                    sb << ", "

                sb << _data.[i].key << ": " << _data.[i].value
                first = false
            }

            i++
        }

        sb <<  "}"
    }

    @inline const func size() => _size
    @inline const func empty() => _size == 0
}

pub class HashSet[K] {
    - _data: &HashMapNode[K, void]
    - _hashes: &u32
    - _size: u64 = 0;
    - _capacity: u64 = 0;

    @inline
    - func needsRehash() => _size * 100 >= _capacity * #{MAX_LOAD_FACTOR}

    @inline
    - func isBucketOccupied(bucket: u64) => isOccupiedHash(_hashes.[bucket])

    - func rehash() {
        var newCapacity = hashNextPrime(_capacity);
        if (newCapacity <= _capacity)
            newCapacity = _capacity * 2 + 1;
        var newData = <&HashMapNode[K, void]> __cxy_calloc(sizeof!(#HashMapNode[K, void]) * newCapacity);
        var newHashes = <&u32> __cxy_calloc(sizeof!(#u32) * newCapacity);

        var n = _capacity;
        for (const i: 0..n) {
            const hashCode = _hashes.[i];
            if (!isOccupiedHash(hashCode))
                continue;
            var index = hashModPrime(<u64>hashCode, newCapacity);
            while (isOccupiedHash(newHashes.[index]))
                index = incrementWrap(newCapacity, index);

            newData.[index] = _data.[i]
            newHashes.[index] = hashCode;
        }

        __cxy_free(_hashes: &void)
        __cxy_free(_data: &void)
        _hashes = newHashes;
        _data = newData
        _capacity = newCapacity
    }

    @inline
    - func removeAt(key: K, index: u64) {
        var next = incrementWrap(_capacity, index);
        while (isBucketOccupied(next)) {
            const nextHash = _hashes.[next];
            const desired = hashModPrime(nextHash, _capacity);
            if (desired <= index || desired > next) {
                _data.[index] = _data.[next]
                _hashes.[index] = nextHash
               index = next
            }
            next = incrementWrap(_capacity, next)
        }
        _hashes.[index] = 0
        _size--
    }

    func `init`(_capacity: u64 = #{DEFAULT_HASH_TABLE_CAPACITY}) {
        _capacity = hashNextPrime(_capacity)
        _data = <&HashMapNode[K, void]> __cxy_calloc(sizeof!(#HashMapNode[K, void]) * _capacity)
        _hashes = <&u32> __cxy_calloc(sizeof!(#u32) * _capacity)
        this._capacity = _capacity
    }

    func `deinit`() {
        if (_capacity) {
            for (const i : 0.._capacity) {
                if (isBucketOccupied(i)) {
                    //_data.[i] = null
                }
            }

            __cxy_free(_data: &void)
            __cxy_free(_hashes: &void)
            _size = 0
            _capacity = 0
        }
    }

    func insert(key: K) {
        var hashCode = hash[K](key) | #{OCCUPIED_MASK};
        var index = hashModPrime(hashCode, _capacity);
        while (isBucketOccupied(index)) {
            if (_hashes.[index] == hashCode && _data.[index] == key) {
                return false
            }
            index = incrementWrap(_capacity, index)
        }
        _data.[index] = HashMapNode[K, void]{key: key}
        _hashes.[index] = hashCode
        _size++

        if (needsRehash())
            rehash()

        return true;
    }

    func get(key: K) : K? {
        const hashCode = hash[K](key) | #{OCCUPIED_MASK};
        var index = hashModPrime(hashCode, _capacity);
        while (isBucketOccupied(index)) {
            if (_hashes.[index] == hashCode && _data.[index] == key)
                return _data.[index].key
            index = incrementWrap(_capacity, index)
        }
        return null
    }

    func contains(key: K) => !!get(key)

    func remove(key: K) {
        const hashCode = hash[K](key) | #{OCCUPIED_MASK};
        var index = hashModPrime(hashCode, _capacity);
        var found = false;
        while (isBucketOccupied(index)) {
            if (_hashes.[index] == hashCode && _data.[index] == key) {
                removeAt(key, index)
                return true
            }
            index = incrementWrap(_capacity, index)
        }

        return false
    }

    func each(fun: func(key: K) -> void) {
        var i = 0;
        while (i < _capacity) {
            if (isOccupiedHash(_hashes.[i]))
                fun(_data.[i].key)
            i++
        }
    }

    func map[U](transform: func(key: K) -> U) {
        var output = Vector[U]();
        this.each((key: K) => { output.push(transform(key)) })
        return output
    }

    func clear() {
        if (_size == 0)
            return;

        for (const i : 0.._capacity) {
            if (isBucketOccupied(i)) {
                //_data.[i] = null
            }
        }

        memset(_hashes: &void, 0, sizeof!(#u32)*_capacity)
        _size = 0
    }

    func `..`() {
        var i = 0;
        return () : K? => {
            while (i < _capacity) {
                if (isOccupiedHash(_hashes.[i]))
                    return _data.[i++].key
                i++
            }
            return null
        }
    }

    const func `str`(sb: String) {
        sb << "{"
        var i = 0;
        var first = true;

        while (i < _capacity) {
            if (isOccupiedHash(_hashes.[i])) {
                if (!first)
                    sb << ", "

                sb << _data.[i].key
                first = false
            }

            i++
        }

        sb <<  "}"
    }

    @inline const func size() => _size
    @inline const func empty() => _size == 0
}