module map

import { hash as hashFunc,
         allocSlice,
         reallocSlice,
         memset,
         Optional,
         Some,
         None,
         PtrRef
} from "stdlib/utils.cxy"

const OCCUPIED_MASK : u32  = 0x80000000;
const DEFAULT_HASH_TABLE_CAPACITY = 4;
const MAX_LOAD_FACTOR = 70; // %

@inline
func incrementWrap(capacity: u64, index: u64) => (index + 1 >= capacity) ? (<u64>0) : index + 1;

@inline
func isOccupiedHash(hash: u32) => (hash & OCCUPIED_MASK) == OCCUPIED_MASK;

pub native func cxy_next_prime(i: u64) : u64;
pub native func cxy_mod_prime(i: u64, p: u64) : u64;


struct HashMapNode[K, V] {
    key: K
    value: V
}

pub struct HashMap[K, V] {
    - data: [HashMapNode[K, V]]
    - hashes: [u32]
    - size: u64 = 0

    @inline
    - func needsRehash() => size * 100 >= len!(data) * MAX_LOAD_FACTOR

    @inline
    - func isBucketOccupied(bucket: u64) => isOccupiedHash(hashes.[bucket])

    - func rehash() {
        var newCapacity = cxy_next_prime(len!(data));
        if (newCapacity <= len!(data))
            newCapacity = len!(data) * 2 + 1;
        var newData = allocSlice[HashMapNode[K,V]](newCapacity);
        var newHashes = allocSlice[u32](newCapacity);

        var n = len!(data);
        for (const i: 0..n) {
            const hash = hashes.[i];
            if (!isOccupiedHash(hash))
                continue;
            var index = cxy_mod_prime(<u64>hash, newCapacity);
            while (isOccupiedHash(newHashes.[index]))
                index = incrementWrap(newCapacity, index);

            newData.[index] = data.[i]
            newHashes.[index] = hash;
        }

        __builtin_free_slice(hashes)
        __builtin_free_slice(data)
        hashes = newHashes;
        data = newData
    }

    @inline
    - func remoteAt(key: K, index: u64) {
        var removed = Some(data.[index].value);

        var next = incrementWrap(len!(data), index);
        while (isBucketOccupied(next)) {
            const nextHash = hashes.[next];
            const desired = cxy_mod_prime(nextHash, len!(data));
            if (desired <= index || desired > next) {
                data.[index] = data.[next]
                hashes.[index] = nextHash
               index = next
            }
            next = incrementWrap(len!(data), next)
        }
        hashes.[index] = 0
        size--

        return removed
    }

    func `new`(capacity: u64 = DEFAULT_HASH_TABLE_CAPACITY) {
        capacity = cxy_next_prime(capacity)
        hashes = allocSlice[u32](capacity)
        data = allocSlice[HashMapNode[K, V]](capacity)
    }

    func insert(key: K, value: V, replace: bool = true) {
        var hash = hashFunc[K](key) | OCCUPIED_MASK;
        var index = cxy_mod_prime(hash, len!(data));
        while (isBucketOccupied(index)) {
            if (hashes.[index] == hash && key == data.[index].key){
                if (replace)
                    data.[index].value = value
                return false;
            }
            index = incrementWrap(len!(data), index)
        }

        data.[index] = HashMapNode[K, V]{key: key, value: value}
        hashes.[index] = hash
        size++

        if (needsRehash())
            rehash()

        return true;
    }

    func get(key: K) {
        const hash = hashFunc[K](key) | OCCUPIED_MASK;
        var index = cxy_mod_prime(hash, len!(data));
        while (isBucketOccupied(index)) {
            if (hashes.[index] == hash && key == data.[index].key)
                return Some(data.[index].value);
            index = incrementWrap(len!(data), index)
        }
        return None[V]()
    }

    func remove(key: K) {
        const hash = hashFunc[K](key) | OCCUPIED_MASK;
        var index = cxy_mod_prime(hash, len!(data));
        var found = false;
        while (isBucketOccupied(index)) {
            if (hashes.[index] == hash && key == data.[index].key) {
                return remoteAt(key, index)
            }
            index = incrementWrap(len!(data), index)
        }

        return None[V]()
    }

    func clear() {
        if (size == 0)
            return;

        for (const i : 0..len!(data)) {
            if (isBucketOccupied(i))
                delete &data.[i]
        }

        __builtin_memset_slice(#[u32], hashes, 0)
        size = 0
    }

    @inline
    func `[]`(key: K) => get(key)

    @inline
    func `[]=`(key: K, value: V) => insert(key, value)

    func `..`(body: func (key: K, value: &const V) -> void) {
        var i = 0;
        while (i < len!(data)) {
            if (isOccupiedHash(hashes.[i]))
                body(data.[i].key, &data.[i].value)

            i++
        }
    }
}
