module fserver

import { time_t, Time } from "./time.cxy"
import { Vector } from "./vector.cxy"
import { HashMap } from "./hash.cxy"
import "./log.cxy"
import { Stat, stat, fstat, FileDescriptor } from "stdlib/os.cxy"
import { Request, Response, Server, Method, Status, SendFile } from "./http.cxy"

import "unistd.h" as unistd
import "stdlib.h" as stdlib
import "sys/mman.h" as vmem

##if (defined MACOS) {
import "sys/fcntl.h" as fcntl
import "sys/syslimits.h" as limits // for PATH_MAX! macro)
}
else {
import "fcntl.h" as fcntl
import "linux/limits.h" as limits // for PATH_MAX! macro
}

#if (defined MACOS) {
macro StatField(X) mk_ident!("st_", X!, "timespec")
}
else {
macro StatField(X) mk_ident!("st_", X!, "tim")
}

#if (!defined CXY_FILE_SERVER_ROUTE) {
    macro CXY_FILE_SERVER_ROUTE "/www"
}

pub struct Config {
    compressMin = 2048:u64;
    enableSendFile = false;
    cacheExpires = 86400:i64;
    mappedMin = 2048:u64;
    root = String("./www/");
    route = CXY_FILE_SERVER_ROUTE!;
}

struct CachedFile {
    fd: i32 = -1;
    data: ^void = null;
    path: String = null;
    len = 0:u64;
    size = 0:u64;
    lastMod: time_t = 0;
    lastAccess: time_t = 0;
    useFd = false;
    isMapped = false;
    flags = 0:u8;

    func `init`() {}

    const func `str`(@unused os: &OutputStream) {}

    func clear() {
        if (data != null) {
            if (isMapped) {
                vmem.munmap(data, size)
            }
            else {
                free(data)
            }
            data = null
        }
        unistd.close(fd)
        isMapped = false
        useFd = false
        fd = -1
        lastMod = 0
        lastAccess = 0
    }

    func `deinit`() {
        clear()
    }
}

type CachedFiles = HashMap[String, CachedFile, HashCase, EqualsCase]

struct MimeConfig {
    allowCompress = false;
    allowCaching = true;
    allowRange = true;
    cacheExpires = -1:i64;
}

struct MimeType {
    mime: String
    config = MimeConfig{};
    func `init`(mime: String) {
        this.mime = &&mime
    }

    const func `str`(@unused os: &OutputStream) {}
}

type MimeTypes = HashMap[String, MimeType, HashCase, EqualsCase]

pub class FileServer {
    LOG_TAG = "FILE_SERVER";
    - mimeTypes = MimeTypes();
    - cachedFiles = CachedFiles();
    - redirects = HashMap[String, String, HashCase, EqualsCase]();
    - wwwDir: String
    - config: Config

    func `init`[Endpoint](ep: &Endpoint, config: Config = Config{}) {
        this.config = config
        initialize()

        ep(config.route, (req: &const Request, resp: &Response) => {
            var uri = req.uri();
            var path = __copy!( uri );
            var idx = path.rIndexOf('.':char);
            if (!idx) {
                var aliasedPath = this.redirects.[path];
                if (!aliasedPath) {
                    resp.end(Status.NotFound)
                    return
                }
                idx =  path.rIndexOf('.':char);
            }
            var ext = String(path.substr(*idx));
            if (req.method() == .Get) {
                resp.end(this.get(req, resp, &&path, &&ext))
            }
            else {
                resp.end(this.head(req, resp, &&path, &&ext))
            }
        })([Method.Get, Method.Head])
          .setAttrs({isStatic: true})
    }

    func mime[T](ext: String, mm: string, config: T) {
        if (!mimeTypes.[ext]) {
            mimeTypes.[ext] = MimeType(&&mm)
        }
        updateMime(&&ext, &&config)
    }

    func updateMime[T](ext: String, config: T) : void {
        var mm = mimeTypes.[&&ext];
        assert!(!!mm);
        update[MimeConfig, T](&(*mm).config, config)
    }

    - func initialize() : void {
        // add text mime types
        mime(".html", "text/html", { allowCaching: false })
        mime(".css", "text/css", {})
        mime(".csv", "text/csv", {})
        mime(".txt", "text/plain", {})
        mime(".sgml","text/sgml", {})
        mime(".tsv", "text/tab-separated-values", {})

        // add compressed mime types
        mime(".bz", "application/x-bzip", { allowCompress: false })
        mime(".bz2", "application/x-bzip2", { allowCompress: false })
        mime(".gz", "application/x-gzip", { allowCompress: false })
        mime(".tgz", "application/x-tar", { allowCompress: false })
        mime(".tar", "application/x-tar", { allowCompress: false })
        mime(".zip", "application/zip, application/x-compressed-zip", { allowCompress: false })
        mime(".7z", "application/zip, application/x-compressed-zip", { allowCompress: false })

        // add image mime types
        mime(".jpg", "image/jpeg", {})
        mime(".png", "image/png", {})
        mime(".svg", "image/svg+xml", {})
        mime(".gif", "image/gif", {})
        mime(".bmp", "image/bmp", {})
        mime(".tiff","image/tiff", {})
        mime(".ico", "image/x-icon", {})

        // add video mime types
        mime(".avi",  "video/avi", {})
        mime(".mpeg", "video/mpeg", {})
        mime(".mpg",  "video/mpeg", {})
        mime(".mp4",  "video/mp4", {})
        mime(".qt",   "video/quicktime", {})

        // add audio mime types
        mime(".au",  "audio/basic", {})
        mime(".midi","audio/x-midi", {})
        mime(".mp3", "audio/mpeg", {})
        mime(".ogg", "audio/vorbis, application/ogg", {})
        mime(".ra",   "audio/x-pn-realaudio, audio/vnd.rn-realaudio", {})
        mime(".ram",  "audio/x-pn-realaudio, audio/vnd.rn-realaudio", {})
        mime(".wav", "audio/wav, audio/x-wav", {})

        // Other common mime types
        mime(".json",  "application/json", {})
        mime(".map",   "application/json", {})
        mime(".js",    "application/javascript", {})
        mime(".ttf",   "font/ttf", {})
        mime(".xhtml", "application/xhtml+xml", {})
        mime(".xml",   "application/xml", {})

        // Usually '/' falls back to index.html
        alias("/", "index.html")

        setupWwwDir()
    }

    - func setupWwwDir() : void {
        var absolute: [char, PATH_MAX!] = [];
        if (config.root.empty()) {
            unistd.getcwd(absolute !: ^char, PATH_MAX!)
        }
        else {
            stdlib.realpath(config.root.str() !: ^const char, absolute)
        }
        wwwDir = String(absolute !: string)
    }

    func alias(src: String, dst: String) : void {
        if (!dst.rIndexOf('.':char)) {
            ERR!( "redirecting '" << src << "' to unsupported file format: '" << dst << "'" )
            assert!(false)
        }

        if (!(redirects.[src] = &&dst)) {
            ERR!( "redirect '" << src << "' already added" )
            assert!(false)
        }
    }

    - func requestPrologue(
        req: &const Request, resp: &Response, path: String, ext: String
    ) : Status | (&MimeType, &CachedFile) {
        var mime = mimeTypes.[ext]
        if (!mime) {
            TRC!("extension type " << ext << " not supported")
            return Status.NotFound
        }

        var mm = *mime
        var sf = loadFile(path)
        if (!sf) {
            TRC!("requested static resource (" << path << ") does not exist");
            return Status.NotFound
        }

        var cf = *sf
        if (mm.config.allowCaching) {
            // if file supports cache headers employ cache headers
            const cc = req.header("If-Modified-Since")
            if (cc) {
                const ifMod = Time((*cc).str());
                println(ifMod, " -- ", Time(cf.lastMod))
                if (ifMod.timestamp() >= cf.lastMod) {
                    // file was not modified
                    return Status.NotModified
                }
            }

            cacheControl(req, resp, &cf, mm);
        }

        if (mm.config.allowRange) {
            // let clients know that the server accepts ranges for current mime type
            resp.header("Accept-Ranges", "bytes");
        }
        else {
            // let clients know that the server doesn't accepts ranges for current mime type
            resp.header("Accept-Ranges", "none");
        }

        return (mm, cf)
    }

    - func get(req: &const Request, resp: &Response, path: String, ext: String): Status {
        match (requestPrologue(req, resp, path, ext)) {
            case Status as s => return s
            case (&MimeType, &CachedFile) as s {
                // set the content type
                resp.header("Content-Type", s.0.mime)
                // prepare the Response
                return prepareResponse(req, resp, s.1, s.0)
            }
            else => return Status.InternalError
        }
    }

    func head(req: &const Request, resp: &Response, path: String, ext: String) {
        match (requestPrologue(req, resp, path, ext)) {
            case Status as s => return s
            else => return Status.Ok
        }
    }

    func prepareResponse(req: &const Request, resp: &Response, cf: &CachedFile, mm: &const MimeType): Status {
        const rng = req.header("Range");
        if (!!rng && mm.config.allowRange) {
            // prepare range based Request
            return buildRangeResponse(resp, *rng, cf);
        }
        else {
            if (config.enableSendFile)
                resp.chunk(SendFile(FileDescriptor(cf.fd), cf.len))
            else
                resp.chunk(__string(cf.data !: string, cf.len))
            return Status.Ok
        }
    }

    - func buildRangeResponse(
        resp: &Response,
        rng: &const String,
        cf: &CachedFile
    ) : Status {
        var i = 0:i64;
        var j = 0:i64;
        var s = rng.__str();
        var ranges = Vector[(i64, i64)]();
        while (i < s.size()) {
            // Skip white-space
            while(s.[i] == ' ':char) i++;
            var start = s.toi[i64]();
            var end: i64;
            s = s.substr(j)
            var tmp = s.indexOf('-':char);
            if (tmp) {
                i = <i64> *tmp
                s = s.substr(i+1)
                end = s.toi[i64]()
            }
            else {
                end = <i64>cf.len
            }

            TRC!("partial content: " << start << "-" << end << "/" << cf.len)
            // build partial content chunk
            if (start > end || start >= cf.len || end > cf.len) {
                TRC!("requested range is out of bounds")
                return Status.RequestRangeInvalid
            }
            ranges.push((start, end))

            tmp = s.indexOf(',':char)
            if (tmp) {
                i = (<i64> *tmp + 1)
            }
        }

        // depending on the number of requested ranges, build Response
        if (ranges.size() == 1) {
            var rng = ranges.[0];
            if (config.enableSendFile)
                resp.chunk(SendFile(FileDescriptor(cf.fd), rng.0, rng.1))
            else
                resp.chunk(__string(cf.data !: string, cf.len).substr(rng.0, rng.1))
            // add the range header
            var header = String();
            header << "bytes " << rng.0 << '-' << rng.1 << '/' << cf.len
            resp.header("Content-Range", &&header)
            return Status.PartialContent
        }
        else if (ranges.size() != 0) {
            // multiple ranges specified, not supported for now
            return Status.NotAcceptable
        }
        return Status.Ok
    }

    func cacheControl(
        @unused req: &const Request,
        resp: &Response, cf: &CachedFile,
        mm: &const MimeType
    ) : void {
        // get http data format
        var dt = String();
        dt << Time(cf.lastMod)
        resp.header("Last-Modified", &&dt)
        // add cache control header
        if (mm.config.cacheExpires > 0) {
            var b = String();
            b << "public, max-age=" << mm.config.cacheExpires
            resp.header("Cache-Control", &&b);
        }
    }

    func loadFile(rel: String) : Optional[&CachedFile] {
        var it = cachedFiles.[rel];
        if (!it) {
            var pathOpt = fileExists(&rel);
            if (pathOpt) {
                var cf = CachedFile{};
                var s = Stat{};

                const path = pathOpt.move();
                cf.fd = fcntl.open(path.str() !: ^const char, O_RDONLY!)
                if (cf.fd < 0) {
                    WRN!("opening static resource(" << path << ") failed")
                    return null
                }

                if (fstat(cf.fd, ptrof s) != 0) {
                    DBG!("static resource cannot b stat'd: " << path)
                    return null
                }
                TRC!(
                    "lastModified: " << s.#{StatField!("m")}.tv_sec << ", " <<
                    "lassAccessed: " << s.#{StatField!("a")}.tv_sec
                )
                if (config.enableSendFile) {
                    TRC!( "enable send fd(" << cf.fd << ") for " << path)
                    cf.useFd = true
                }
                else if (!readFile(&cf, &s)) {
                    TRC!("loading file (" << path << ") failed")
                    unistd.close(cf.fd)
                    return null
                }

                cf.lastMod    = <time_t> s.#{StatField!("m")}.tv_sec
                cf.lastAccess = <time_t> s.#{StatField!("a")}.tv_sec
                cf.len        = s.st_size
                cf.path       = &&path

                // file successfully loaded, add file to cache
                TRC!("file '" << cf.path << "' loaded and cached")
                cachedFiles.[rel] = &&cf
                return cachedFiles.[rel]
            }
            return null
        }
        else {
            var cf = *it;
            var s = Stat{};
            stat(cf.path.str(), ptrof s)

            // reload file if it was recently modified
            if(cf.lastMod != s.#{StatField!("m")}.tv_sec) {
                cf.clear();

                cf.fd = fcntl.open(cf.path.data(), O_RDONLY!)
                if (cf.fd < 0) {
                    WRN!("opening static resource(" << cf.path << ") failed")
                    cachedFiles.remove(rel)
                    return null
                }

                if (config.enableSendFile) {
                    TRC!( "enable send fd(" << cf.fd << ") for " << cf.path)
                    cf.useFd = true
                }
                else if (!readFile(cf, s)) {
                    TRC!("loading file " << cf.path << " failed")
                    unistd.close(cf.fd)
                    cachedFiles.remove(rel)
                    return null
                }

                cf.lastMod    = <time_t> s.#{StatField!("m")}.tv_sec
                cf.lastAccess = <time_t> s.#{StatField!("a")}.tv_sec
                cf.len        = s.st_size
                TRC!("file '" << cf.path << "' cache refreshed")
            }
            return it
        }
    }

    func readFile(cf: &CachedFile, s: &const Stat) : bool {
        if (cf.fd < 0) {
            TRC!("reloading a closed file not allowed")
            return false
        }

        if (s.st_size >= config.mappedMin) {
            var total = s.st_size;
            total += SysConfPageSize - (total % SysConfPageSize)
            cf.data = vmem.mmap(null, total, PROT_READ!, MAP_SHARED!, cf.fd, 0)
            if (cf.data == ((-1:u64) !: ^void)) {
                WRN!("mapping static resource (" << cf.fd << ") of size " << total << " failed: " << errno!);
                return false;
            }
            cf.isMapped = true
            cf.size = s.st_size
        }
        else {
            // read file
            var total = s.st_size + 8;
            var nread = 0:u64;
            var toread = s.st_size;
            var b = malloc(total) !: ^char;
             while (nread < toread) {
                var cread = unistd.read(cf.fd, ptroff!(b + nread), toread - nread);
                if (cread < 0) {
                    WRN!("reading file " << cf.fd << " failed: " << errno!())
                    free(b !: ^void)
                    return false
                }
                nread += cread
            }
            cf.data = b
            cf.isMapped = false
            cf.size = nread
        }

        return true
    }

    func fileExists(rel: &const String) : String? {
        // we want to ensure that the file is within the base directory
        var b = String();
        // append base, followed by file
        b << wwwDir << rel
        var absolute: [char, PATH_MAX!] = [];
        var p = stdlib.realpath(b.str() !: ^const char, absolute);
        if (p == null)
            return null

        if (__string(absolute !: string, wwwDir.size()) != wwwDir.__str()) {
            // path violation
            DBG!("requested path has back references: " << rel)
            return null
        }

        var s = Stat{};
        if (stat(absolute !: string, ptrof s) != 0) {
            // file does not exist
            DBG!("requested path '" <<  (absolute !: string) << "' does not exist, errno: " << errno!)
            return null
        }

        if (!S_ISREG!(s.st_mode)) {
            // file does not exist
            DBG!("requested path '" <<  (absolute !: string) << "' is not a regular file, mode: " << (s.st_mode & S_IFMT!))
            return null
        }

        // dup over the generated path buffer
        return String(absolute !: string)
    }
}