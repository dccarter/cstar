module http

import "./log.cxy"

import { Time } from "./time.cxy"
import { Vector } from "./vector.cxy"
import { HashMap } from "./hash.cxy"
import { Trie } from "./trie.cxy"

import { Address } from "./net.cxy"
import { TcpSocket, TcpListener, BufferedSocketOutputStream } from "./tcp.cxy"

##if (defined MACOS) {
    import "_ctype.h" as ctype
}
else {
    import "ctype.h" as ctype
}

import "stdlib.h" as stdlib
import "strings.h" as cstrings

import "native/http/parser.h" as parser

pub enum Method : u32 {
    Delete,
    Get,
    Head,
    Post,
    Put,
    Connect,
    Options,
    Trace,
    Unknown
}

pub enum Status : i32 {
    Continue                    = 100,
    SwitchingProtocols          = 101,
    Ok                          = 200,
    Create                      = 201,
    Accepted                    = 202,
    NonAuthoritative            = 203,
    NoContent                   = 204,
    ResetContent                = 205,
    PartialContent              = 206,
    MultipleChoices             = 300,
    MovedPermanently            = 301,
    Found                       = 302,
    SeeOther                    = 303,
    NotModified                 = 304,
    UseProxy                    = 305,
    TemporaryRedirect           = 307,
    BadRequest                  = 400,
    Unauthorized                = 401,
    PaymentRequired             = 402,
    Forbidden                   = 403,
    NotFound                    = 404,
    MethodNotAllowed            = 405,
    NotAcceptable               = 406,
    ProxyAuthRequired           = 407,
    RequestTimeout              = 408,
    Conflict                    = 409,
    Gone                        = 410,
    LengthRequired              = 411,
    PreconditionFailed          = 412,
    RequestEntityTooLarge       = 413,
    RequestUriTooLarge          = 414,
    UnsupportedMediaType        = 415,
    RequestRangeInvalid         = 416,
    ExpectationFailed           = 417,
    InternalError               = 500,
    NotImplement                = 501,
    BadGateway                  = 502,
    ServiceUnavailable          = 503,
    GatewayTimeout              = 504,
    BadVersion                  = 505
}

@inline
func toupper(c: wchar) => <char>(<u32>ctype.toupper(<i32>c))

pub func methodFromString(method: __string) {
    var x = toupper(method.[0]);
    var maybe = (Method.Unknown, "");

    switch(x) {
        case 'D':char => maybe = (Method.Delete, "DELETE")
        case 'G':char => maybe = (Method.Get, "GET")
        case 'H':char => maybe = (Method.Head, "HEAD")
        case 'P':char => {
            if (toupper(method.[1]) == 'O':char)
                maybe = (Method.Post, "POST")
            else
                maybe = (Method.Put, "PUT")
        }
        case 'C':char => maybe = (Method.Connect, "CONNECT")
        case 'O':char => maybe = (Method.Options, "OPTIONS")
        case 'T':char => maybe = (Method.Trace, "TRACE")
        default  => return (Method.Unknown, 0:u64)
    }

    var str = __string(maybe.1);
    if (method.size() < str.size())
        return (Method.Unknown, 0:u64)

    if (EqualsCase{}(&method, &str))
        return (maybe.0, str.size())

    return (Method.Unknown, 0:u64)
}

pub func statusText(status: Status) {
    switch (status) {
        case. Continue =>
            return "HTTP/1.1 100 Continue"
        case. SwitchingProtocols =>
            return "HTTP/1.1 101 Switching Protocols"
        case. Ok =>
            return "HTTP/1.1 200 OK"
        case. Create =>
            return "HTTP/1.1 201 Created"
        case. Accepted =>
            return "HTTP/1.1 202 Accepted"
        case. NonAuthoritative =>
            return "HTTP/1.1 203 Non-Authoritative Information"
        case. NoContent =>
            return "HTTP/1.1 204 No Content"
        case. ResetContent =>
            return "HTTP/1.1 205 Reset Content"
        case. PartialContent =>
            return "HTTP/1.1 206 Partial Content"
        case. MultipleChoices =>
            return "HTTP/1.1 300 Multiple Choices"
        case. MovedPermanently =>
            return "HTTP/1.1 301 Moved Permanently"
        case. Found =>
            return "HTTP/1.1 302 Found"
        case. SeeOther =>
            return "HTTP/1.1 303 See Other"
        case. NotModified =>
            return "HTTP/1.1 304 Not Modified"
        case. UseProxy =>
            return "HTTP/1.1 305 Use Proxy"
        case. TemporaryRedirect =>
            return "HTTP/1.1 307 Temporary Redirect"
        case. BadRequest =>
            return "HTTP/1.1 400 Bad Request"
        case. Unauthorized =>
            return "HTTP/1.1 401 Unauthorized"
        case. PaymentRequired =>
            return "HTTP/1.1 402 Payment Required"
        case. Forbidden =>
            return "HTTP/1.1 403 Forbidden"
        case. NotFound =>
            return "HTTP/1.1 404 Not Found"
        case. MethodNotAllowed =>
            return "HTTP/1.1 405 Method Not Allowed"
        case. NotAcceptable =>
            return "HTTP/1.1 406 Not Acceptable"
        case. ProxyAuthRequired =>
            return "HTTP/1.1 407 Proxy Authentication Required"
        case. RequestTimeout =>
            return "HTTP/1.1 408 Request Time-out"
        case. Conflict =>
            return "HTTP/1.1 409 Conflict"
        case. Gone =>
            return "HTTP/1.1 410 Gone"
        case. LengthRequired =>
            return "HTTP/1.1 411 Length Required"
        case. PreconditionFailed =>
            return "HTTP/1.1 412 Precondition Failed"
        case. RequestEntityTooLarge =>
            return "HTTP/1.1 413 Request Entity Too Large"
        case. RequestUriTooLarge =>
            return "HTTP/1.1 414 Request-URI Too Large"
        case. UnsupportedMediaType =>
            return "HTTP/1.1 415 Unsupported Media Type"
        case. RequestRangeInvalid =>
            return "HTTP/1.1 416 Requested range not satisfiable"
        case. ExpectationFailed =>
            return "HTTP/1.1 417 Expectation Failed"
        case. InternalError =>
            return "HTTP/1.1 500 Internal Server Error"
        case. NotImplement =>
            return "HTTP/1.1 501 Not Implemented"
        case. BadGateway =>
            return "HTTP/1.1 502 Bad Gateway"
        case. ServiceUnavailable =>
            return "HTTP/1.1 503 Service Unavailable"
        case. GatewayTimeout =>
            return "HTTP/1.1 504 Gateway Time-out"
        case. BadVersion =>
            return "HTTP/1.1 505 HTTP Version not supported"
        default =>
            return "HTTP/1.1 500  "
    }
}

pub func methodName(method: Method) {
    switch(method) {
        case .Delete =>
            return "DELETE"
        case .Get =>
            return "GET"
        case .Head =>
            return "HEAD"
        case .Post =>
            return "POST"
        case .Put =>
            return "PUT"
        case .Connect =>
            return "CONNECT"
        case .Options =>
            return "OPTIONS"
        case .Trace =>
            return "TRACE"
        default =>
            return "Invalid"
    }
}

type HeaderMap = HashMap[String, String, HashCase, EqualsCase];
pub var CONTENT_LENGTH_S = String("Content-Length");
pub var CONTENT_LENGTH_CS = __string("Content-Length");
pub var DATE_S = String("Date");
pub var SERVER_S = String("Server");
pub var CONNECTION_S = String("Connection");

pub class Response {
    - _status: Status = .Ok;
    - _headers = HeaderMap();
    - _body = String();

    func `init`() {
    }

    @[prop, inline]
    const func headers() => &_headers
    @[prop, inline]
    func body() => &_body
    @[prop, inline]
    const func status() => _status
    @[prop, inline]
    const func size() => _body.size()

    const func ok() => _status == .Ok

    func end(status: Status = .Ok) {
        _status = status
    }

    @inline
    func header(name: String, value: String) {
        _headers.[&&name] = &&value
    }

    @inline
    const func header(name: String) => _headers.[&&name]
}

pub class Request {
    - LOG_TAG = "HTTP_REQUEST";

    - _headers = HeaderMap();
    - _method: Method = .Unknown;
    - _query = HashMap[String, String]();
    - _params = HashMap[__string, __string]();
    - _path: String = null;
    - _uri: String = null;
    - _body: String = null;
    - _minorVersion: i32 = 1;
    - _contentLength: u64 = 0;
    - _route: ^Route

    func `init`() {
    }

    - func parseHeaders(buf: ^const char, len: u64) : Status | i32 {
        var method: ^const char = null;
        var methodLen : u64 = 0;
        var path: ^const char = null;
        var pathLen : u64 = 0;
        var headers: [parser.phr_header, 128] = [];
        var numHeaders: u64 = len!(headers);
        var minorVersion: i32 = -1;

        var parsed = parser.phr_parse_request(
            buf,
            len,
            ptrof method,
            ptrof methodLen,
            ptrof path,
            ptrof pathLen,
            ptrof minorVersion,
            (ptrof headers) !: ^parser.phr_header,
            ptrof numHeaders,
            0);

        if (parsed < 0) {
            // failed to parse request
            TRC!("parse failed: " << parsed << '/' << len)
            return Status.BadRequest
        }

        var parsedMethod = methodFromString(__string(method !: string, methodLen));
        if (parsedMethod.0 == .Unknown) {
            // Invalid request method
            TRC!("bad request: invalid request method " << __string(method !: string, methodLen))
            return Status.BadRequest
        }
        _method = parsedMethod.0
        _minorVersion = minorVersion
        _path = String(path, pathLen)
        for (var i: 0..numHeaders) {
            const header = headers.[i];
            const headerName = __string(header.name !: string, header.name_len);
            if (EqualsCase{}(&headerName, &CONTENT_LENGTH_CS)) {
                _contentLength =
                    __string(header.value !: string, header.value_len).toi[u64]();
            }
            else {
                _headers.[String(header.name, header.name_len)] =
                    String(header.value, header.value_len)
            }
        }

        return parsed
    }

    func feed(buf: ^const char, len: u64) {
        var ret = parseHeaders(buf, len);
        var parsed: u64 = 0;
        match (ret) {
            case Status as status => return status
            case i32 as consumed => parsed = consumed
        }

        var remaining = len - parsed;
        if (remaining == _contentLength)
            _body = String(ptroff!(buf + parsed), remaining)

        return Status.Ok
    }

    @inline
    func param(name: __string, value: __string) {
        _params.[name] = value
    }

    @inline
    const func param(name: __string) => _params.[name]

    @[prop, inline]
    const func path() => &_path

    @[prop, inline]
    const func method() => _method

    @[prop, inline]
    const func header(name: String) => _headers.[name]

    @[inline, prop]
    const func route() => &(*_route)

    @[inline]
    func route(it: ^Route) {
        _route = it
    }

    @[inline, prop]
    const func uri() => &_uri

    @[inline]
    func uri(it: String) {
        _uri = it
    }
}

type HandlerFn = func(req: &const Request, res: &Response) -> void

pub struct RouteAttrs {
    isStatic = false;
}

class Route {
    - prefix: __string
    - handler: Lambda[HandlerFn]
    - params: Vector[__string]
    - _methods: u32
    - _attrs = RouteAttrs{};

    func `init`(methods: u32, prefix: __string, fn: HandlerFn, params: Vector[__string]) {
        handler = Lambda[HandlerFn](fn)
        this.prefix = prefix
        this.params = &&params
        _methods = methods
    }

    @inline
    func `()`(req: &const Request, res: &Response) {
        handler(req, res)
    }

    @inline
    func `()`(methods: [Method]) {
        for (const m,_: methods)
            _methods |= (1 << m)
        return &this
    }

    @inline
    func setAttrs[T](attrs: T) {
        update[RouteAttrs, T](&_attrs, &&attrs)
        return &this
    }

    @inline
    const func `==`(other: &This) => prefix == other.prefix

    @inline
    const func `str`(os: &OutputStream) { os << "route: " << prefix }

    @inline
    const func isMethodSupported(method: Method) => (_methods & (1:u32 << (<u32>method))) != 0

    @inline
    const func attrs() => &_attrs
}

class Router {
    - LOG_TAG = "HTTP_ROUTER";
    - routes: Trie[Route]

    func `init`() {
        routes = Trie[Route]();
    }

    - func add(methods: u32, path: string, idx: i64, fn: HandlerFn) {
        assert!(path.[idx] == '/':char)
        var i = idx;
        while (path.[i] != '\0':char && path.[i] != '{':char) {
            i++
        }

        if (path.[i] == '{':char)
            i--;
        var prefix = __string(path, i).substr(idx);
        var params = Vector[__string]();
        parseParams(&params, path, i)
        var route = Route(methods, prefix, fn, &&params);
        routes.add(path, i, route)
        return route
    }

    func add(path: string, fn: HandlerFn) {
        var methods = Method.Get;
        var idx = 0:i64;
        if (path.[0] != '/':char) {
            var parsedMethod = methodFromString(path);
            assert!(parsedMethod.0 != .Unknown)
            methods = parsedMethod.0
            idx = <i64>parsedMethod.1;
            while (path.[idx] == ' ':char)
                idx++
        }

        return add(1 << methods, path, idx, &&fn)
    }

    func handle(path: __string, req: &Request, resp: &Response) {
        var found = routes.find(path.str(), path.size());
        if (!found) {
            TRC!("route: " << path)
            resp.end(Status.NotFound)
            return;
        }

        var consumed, route = found.move();
        var args = path.substr(consumed);
        if (!route.attrs().isStatic) {
            match (parseRouteArgs(req, &route.params, args)) {
                case Status as value => {
                    resp.end(value)
                    return;
                }
                case u64 as value => {
                    // TODO parse route arguments
                    args = args.substr(value)
                }
            }
        }
        else {
            req.uri(String(args))
        }
        route(req, resp)
    }

    func find(req: &Request, resp: &Response): Route? {
        var path = req.path().__str();
        var found = routes.find(path.str(), path.size());
        if (!found) {
            TRC!("not found: " << req.path())
            resp.end(Status.NotFound)
            return null;
        }

        var consumed, route = found.move();
        if (!route.isMethodSupported(req.method())) {
            TRC!("not found: unsupported method '" << req.method() << "'")
            resp.end(Status.NotFound)
            return null;
        }

        var args = path.substr(consumed);
        if (!route.attrs().isStatic) {
            match (parseRouteArgs(req, &route.params, args)) {
                case Status as value => {
                    resp.end(value)
                    return null;
                }
                case u64 as value => {
                    // TODO parse route arguments
                    args = args.substr(value)
                }
            }
        }
        else {
            req.uri(String(args))
        }
        return &&route
    }

    - func parseParams(params: &Vector[__string], path: string, idx: i64) : void {
        var s = path !: ^const char;
        while (path.[idx] == '/':char) {
            idx++
            assert!(path.[idx++] == '{':char)
            var i = idx;
            while (path.[i] != '\0':char && path.[i] != '}':char)
                i++
            assert!(path.[i] == '}':char)
            var name = __string(ptroff!(s + idx) !: string, i - idx);
            idx = i + 1
            params.push(name)
        }
    }

    - func parseRouteArgs(req: &Request, params: &Vector[__string], path: __string) : u64 | Status {
        var p = path.data();
        var idx = 0:u64;
        for (var i: 0..params.size()) {
            if (p.[idx++] != '/':char) {
                TRC!("bad request: route missing parameters")
                return Status.BadRequest
            }
            var j = idx;
            while (p.[j] != '\0':char && p.[j] != '/':char && p.[j] != '?':char)
                j++;
            var value = __string(ptroff!(p + idx) !: string, j - idx);
            idx = j;
            req.param(params.[<i32>i], value)
        }

        if (p.[idx] != '\0':char && p.[idx] != '?':char) {
            TRC!("bad request: too many path params: " << path)
            return Status.BadRequest
        }

        return idx
    }
}

pub struct Config {
    - address = Address("0.0.0.0", 8100);
    - serverName = String("cxy");
    - hstsEnable = 5000:u64;
    - keepAliveTime = 5000:i64;
}

pub class Connection[Middlewares] {
    @static
    - LOG_TAG = "HTTP_CONNECTION";
    - sock: TcpSocket
    - mws:  ^Middlewares
    - router: ^Router
    - req: Request
    - resp: Response
    - config: ^Config
    - _close: bool = false;

    func `init`(config: ^Config, mws: ^Middlewares, router: ^Router, sock: TcpSocket) {
        this.router = router
        this.sock = &&sock
        this.config = config
        this.mws = mws
    }

    func handle() {
        while (!_close && !!sock) {
            handleConnection()
        }
    }

    - func handleConnection(): void {
        req = Request()
        resp = Response()
        if (!receive())
            return;

        if (!resp.ok()) {
            sendResponse()
            return;
        }

        TRC!( (methodName(req.method())) << " " << req.path() )
        var route = (*router).find(&req, &resp);

        if (!route) {
            resp.end(Status.NotFound)
            sendResponse()
            return;
        }
        invokeRouteHandler(route.move())

        sendResponse()
    }

    - func invokeRouteHandler(route: Route) : void {
        req.route(ptrof route)
        #for (const i: 0..Middlewares.membersCount) {
            // invoke middlewares
            mws.#{i}.before(&req, &resp)
            defer mws.#{i}.after(&req, &resp)
            if (!resp.ok())
                return;
        }
        // handle route
        route(&req, &resp)
    }

    - func receive() : bool {
        var buf: [char, 8192] = [];

        var received = sock.receive(buf, 8192);

        if (received) {
            var len = *received;
            if (len > 0) {
                var status = req.feed(buf, *received);
                if (status != .Ok)
                    resp.end(status)
                return true
            }
        }

        return false
    }

    - func sendResponse() : void {
        var sos = BufferedSocketOutputStream(sock);
        var line0 = __string(statusText(resp.status()));
        sos << line0 << "\r\n"
        if (resp.status() != .Ok && resp.body().empty()) {
            resp.body() << line0.substr(9)
        }

        _close = false;
        if (var conn = resp.header(CONNECTION_S)) {
            _close = *conn == "Close"
        }

        if (!_close && config.keepAliveTime > 0) {
            sos << "Connection: Keep-Alive\r\n"
            sos << "Keep-Alive: " << config.keepAliveTime << "\r\n"
        }

        if (config.hstsEnable > 0) {
            sos << "Strict-Transport-Security: max-age"
                << config.hstsEnable << "; includeSubdomains\r\n"
        }

        for (var header: resp.headers()) {
            sos << header.0 << ": " << header.1 << "\r\n"
        }


        if (!resp.header(SERVER_S)) {
            sos << "Server: " << config.serverName << "\r\n"
        }

        if (!resp.header(DATE_S))
            sos << "Date: " << Time() << "\r\n"

        if (!resp.header(CONTENT_LENGTH_S)) {
            sos << "Content-Length: " << resp.size() << "\r\n"
        }

        sos << "\r\n"
        if (resp.size() > 0)
            sos << resp.body()
    }
}

pub class Server[Middlewares] {
    require!(Middlewares.isTuple, "requires a tuple of middlewares")
    @static
    - LOG_TAG = "HTTP_SERVER";
    - mws: Middlewares
    - config: Config
    - listener: TcpListener
    - router: Router

    func `init`(config: Config = Config{}) {
        // initialize middlewares
        #for (const i: 0..Middlewares.membersCount) {
            #const M = typeat!(#Middlewares, #{i});
            require!(M.isClass, "A middleware must be a class type")
            require!(has_member!(#M, "before", #func(_: &const Request, _: &Response) -> void),
                     "middle {t} must implement `before` handler of type {t}",
                     #M, #func(_: &const Request, _: &Response) -> void)
            require!(has_member!(#M, "after", #func(_: &const Request, _: &Response) -> void),
                                 "middle {t} must implement `after` handler of type {t}",
                                 #M, #func(_: &const Request, _: &Response) -> void)

            require!(has_member!(#M, "op__init", #func() -> void),
                                 "middle {t} must implement a default constructor",
                                 #M)
            mws.#{i} = #{M}()
        }
        // initialize other variables
        this.config = config
        router = Router()
        listener = TcpListener(config.address)
    }

    @inline
    func middleware[M]() {
        #const idx = indexof!(#Middlewares, #M);
        require!(idx >= 0, "type '{t}' is not a middleware, middlewares: {t}", #M, #Middlewares)
        return mws.#{idx}
    }

    func start() {
        DBG!( "starting server at " << config.address )
        if (!listener.listen(1024)) {
            ERR!( "listening failed" )
            return;
        }

        while (listener) {
            var sock = listener.accept();
            if (!sock)
                continue;

            async {
                var name: [char, 64] = [];
                var s = sock.move();
                sprintf(name, "conn-%hu", s.address().port())
                setname!(name !: string)
                handleConnection(&&s)
            }
        }
        DBG!( "server stopped" )
    }

    func stop() {
        DBG!("stopping server")
        listener.close()
    }

    @[noinline]
    - func handleConnection(sock: TcpSocket): void {
        // receive request
        TRC!("Connection " << sock.address())
        var connection = Connection[Middlewares](ptrof config, ptrof mws, ptrof router, &&sock);
        connection.handle()
    }

    func `()`(route: string, handler: HandlerFn) {
        return router.add(route, &&handler)
    }
}

pub class Cors {
    @static
    - LOG_TAG = "HTTP_CORS";
    - allowOrigin = String("*");
    - allowHeaders = String("Origin, X-Requested-With, Content-Type, Accept, Authorization");

    func `init`() { }

    func before(req: &const Request, res: &Response) {
        if (req.method() == .Head) {
            /* Requesting options */
            var requestMethod = req.header("Access-Control-Request-Method");
            if (requestMethod) {
                var method = *requestMethod;
                var corsMethod = methodFromString(method.__str());
                if (corsMethod.0 == .Unknown) {
                    TRC!("bad request: unknown method " << method )
                    res.end(Status.BadRequest)
                    return
                }

                if (req.route().isMethodSupported(corsMethod.0)) {
                    // only if route supports requested method
                    res.header("Access-Control-Allow-Methods", <String>(*requestMethod));
                    res.end();
                }
            }
        }
    }

    func after(@unused req: &const Request, res: &Response) {
        if (!allowOrigin.empty()) {
            res.header("Access-Control-Allow-Origin", allowOrigin)
        }

        if (!allowHeaders.empty()) {
            res.header("Access-Control-Allow-Headers", allowHeaders)
        }
    }

    func configure[Cfg](cfg: Cfg) {
        require!(Cfg.isStruct, "cfg must be a struct {t}", #Cfg)
        #if (has_member!(#Cfg, "allowOrigin", #String))
            allowOrigin = &&cfg.allowOrigin
        #if (has_member!(#Cfg, "allowOrigin", #string))
            allowOrigin = String(cfg.allowOrigin)
        #if (has_member!(#Cfg, "allowHeaders", #String))
            allowHeaders = &&cfg.allowHeaders
        #if (has_member!(#Cfg, "allowHeaders", #string))
            allowHeaders = String(cfg.allowHeaders)
    }
}
