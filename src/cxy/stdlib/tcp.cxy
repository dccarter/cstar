module tcp

import { Address } from "./net.cxy"
import { State } from "./coro.cxy"

import "sys/socket.h" as socket
import "sys/errno.h" as errno
import "unistd.h" as unistd
##if (defined MACOS) {
    import "sys/fcntl.h" as fcntl
}
else {
    import "fcntl.h" as fcntl
    import "bits/socket_type.h" as _st
}

#if (!defined MACOS) {
    macro SOCK_STREAM _st.__socket_type.SOCK_STREAM
}

func configureSocket(fd: i32)  {
    /* Make the socket non-blocking. */
    var opt = fcntl.fcntl(fd, F_GETFL!, 0);
    if (opt == -1)
        opt = 0;
    var rc = fcntl.fcntl(fd, F_SETFL!, opt | O_NONBLOCK!);
    assert!(rc != -1);
    /*  Allow re-using the same local address rapidly. */
    opt = 1;
    rc = socket.setsockopt(fd, SOL_SOCKET!, SO_REUSEADDR!, ptrof opt, <u32>sizeof!(opt));
    assert!(rc == 0);

//#if (defined MACOS) {
//    opt = 1;
//    rc = socket.setsockopt(fd, SOL_SOCKET!, SO_NOSIGPIPE!, ptrof opt, <u32>sizeof!(opt));
//    const err = errno!;
//    assert!(rc == 0 && err != EINVAL!);
//}
}

pub class TcpSocket {
    - addr: Address
    - fd: i32

    func `init`(fd: i32, addr: Address) {
        this.fd = fd
        this.addr = addr
        configureSocket(this.fd)
    }

    func `init`() {
        fd = -1
    }

    @inline
    const func `hash`() => addr.op__hash()

    @inline
    const func `!!`() {
        return !isnull(this) && fd != -1
    }

    @inline
    const func address() => addr

    func receive(buffer: ^void, size: u64, timeout: u64 = 0): u64? {
        var remaining = size;
        var data = buffer !: ^char;
        var total: u64 = 0;

        while (fd != -1 && remaining > 0) {
            var sz = socket.recv(fd, ptrof data.[total], remaining, 0);
            if (sz == 0) {
                if (total > 0)
                    return total

                close()
                return null
            }

            if (sz == -1) {
                if (errno! != EAGAIN! && errno! != EWOULDBLOCK!) {
                    if (errno! == ECONNRESET!)
                        close()
                    return null
                }

                if (total > 0)
                    return total

                var rc = evin(fd, timeout);
                if (rc != State.AE_READABLE) {
                    errno! = ETIMEDOUT!;
                    return null
                }

                continue
            }

            total += sz
            remaining -= sz
        }

        return total
    }

    func sendBuffer(buffer: ^const void, size: u64, timeout: u64 = 0): u64? {
        var data = buffer !: ^const char;
        var remaining = size;
        var total: u64 = 0;
        while (fd != -1 && remaining > 0) {
            var sz = socket.send(fd, ptrof data.[total], remaining, 0);
            if (sz == -1) {
                if(errno! == EPIPE!) {
                    errno! = ECONNRESET!
                    close()
                    return null
                }

                if(errno! != EAGAIN! && errno! != EWOULDBLOCK!)
                    return null

                var rc = evout(fd, timeout);
                if (rc != State.AE_WRITABLE) {
                    errno! = ETIMEDOUT!
                    return null
                }
                continue
            }

            total += sz
            remaining -= sz
        }
        errno! = 0
        return total
    }

    func send[T](data: T, timeout: u64 = 0) {
        #if (T.isString) {
            #if (T.isStruct) {
                return sendBuffer(data.str !: ^void, len!(data), timeout)
            }
            else {
                return sendBuffer(data !: ^void, len!(data), timeout)
            }
        }
        else #if (T.isSlice) {
            return sendBuffer(data.data, data.count, timeout)
        }
        else {
            error!("type {t} cannot be sent as is, consider using sendBuffer", T)
        }
    }

    func close(): void {
        if (fd != -1) {
            unistd.close(fd)
            fd = -1
        }
    }

    @inline
    func `deinit`()  { close() }

    const func `str`(os: &OutputStream) {
        os << addr
    }
}

class SocketOutputStream : OutputStream {
    - sock: TcpSocket
    - timeout: u64

    func `init`(sock: TcpSocket, timeout: u64 = 0) {
        this.sock = sock
        this.timeout = timeout
    }

    func append(data: ^const void, size: u64) {
        sock.sendBuffer(data, size, timeout)
    }
}

pub class BufferedSocketOutputStream : BufferedOutputStream {
    - sock: TcpSocket
    - timeout: u64

    func `init`(sock: TcpSocket, timeout: u64 = 0) {
        super()
        this.sock = &&sock
        this.timeout = timeout
    }

    func flush(data: ^const void, size: u64) {
        sock.sendBuffer(data, size, timeout)
    }
}

pub class TcpListener {
    - bind: Address
    - fd: i32

    func `init`(addr: Address) {
        bind = addr
        fd = -1
    }

    func `!!`() => (this !: ^void) != null && fd != -1

    func listen(backlog: i32 = 127) {
        fd = socket.socket(bind.family(), <i32>SOCK_STREAM!, 0)
        if (fd == -1) {
            return false
        }
        configureSocket(fd)

        var rc = socket.bind(fd, bind.nativeAddr(), <u32>bind.len());
        if (rc == -1) {
            close()
            return false
        }

        rc = socket.listen(fd, backlog)
        if (rc != 0) {
            close()
            return false
        }

        if (bind.port() == 0) {
            var len = <u32> sizeof!(bind);
            rc = socket.getsockname(fd, bind.nativeAddr(), ptrof len)
            if (rc == -1) {
                close()
                return false
            }
        }

        return true
    }

    func accept(timeout: u64 = 0): TcpSocket? {
        var addr = Address();
        while (this) {
            /* Try to get new connection (non-blocking). */
            var len = <u32> sizeof!(addr);
            var accepted = socket.accept(fd, addr.nativeAddr(), ptrof len);
            if (accepted >= 0) {
                return TcpSocket(accepted, addr)
            }

            if (errno! != EAGAIN! && errno! != EWOULDBLOCK!)
                return null
            /* Wait till new connection is available. */
            var rc = evin(fd, timeout);
            if (rc != State.AE_READABLE) {
                errno! = ETIMEDOUT!;
                return null
            }
        }
        return null
    }

    @inline
    func close() : void { shutdown() }

    func shutdown(how: i32 = <i32>SHUT_RDWR!): void {
        if (fd != -1) {
            socket.shutdown(fd, how)
            unistd.close(fd)
            fd = -1
        }
    }

    func `deinit`() { close(); }
}

pub async func tcpConnect(addr: Address, @unused deadline: i64 = 0): TcpSocket {
    /* Open a socket. */
    var fd = socket.socket(addr.family(), <i32>SOCK_STREAM!, 0);
    if (fd == -1)
        return null

    var sock = TcpSocket(fd, addr);

    /* Connect to the remote endpoint. */
    var rc = socket.connect(fd, addr.nativeAddr(), <i32>addr.len());
    if (rc != 0) {
        assert!(rc == -1)
        if (errno! != EINPROGRESS!)
            return null

        rc = evin(fd)
        if (rc == 0) {
            errno! = ETIMEDOUT!
            return null
        }

        var err: i32 = 0;
        var errSize = <u32>sizeof!(err);
        rc = socket.getsockopt(fd, SOL_SOCKET!, SO_ERROR!, (ptrof err) !: ^void, ptrof errSize)
        if (rc != 0) {
            err = errno!
            unistd.close(fd)
            errno! = err
            return null
        }

        if (err != 0) {
            unistd.close(fd)
            errno! = err
            return null
        }
    }

    errno! = 0
    return sock
}