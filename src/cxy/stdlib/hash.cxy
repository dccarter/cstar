module hash

import { Vector } from "stdlib/vector.cxy"

macro HMAP_PRIMES_COUNT = 24`u64
macro HMAP_LOAD_FACTOR = 0.9

const HMAP_RIMES: [u64, HMAP_PRIMES_COUNT!] = [
    0`u64,     1,      5,      11,     23,      53,      101,     197,
    389,   683,    1259,   2417,   4733,    9371,    18617,   37097,
    74093, 148073, 296099, 592019, 1100009, 2200013, 4400021, 8800019
];

@poco
struct HashMapNode[K, V] {
    hash: u64 = 0;
    key: K
    #if (#V != #void) {
        value: V
    }

    func `init`() {}

    @inline
    func `==`(key: K) {
        return this.key == &key
    }

    func `deinit`() {
        hash = 0
    }
}

pub class HashMap[K, V, Hasher = Hash[K], Cmp = Equals[K]] {
    - _data: ^HashMapNode[K, V] = null;
    - _capacity: u64 = 0;
    - _size: u64 = 0;

    - const func idealSize(size: u64) {
        size = <u64>(<f64>(size + 1) / HMAP_LOAD_FACTOR!)
        for (const i: 0..HMAP_PRIMES_COUNT!) {
            if (HMAP_RIMES.[i] >= size)
                return HMAP_RIMES.[i]
        }

        var last = HMAP_RIMES.[HMAP_PRIMES_COUNT! - 1]
        while (last < size)
            last <<= 1
        return last
    }

    - const func probe(i: u64, h: u64) {
        var v = i - (h - 1)
        if (v < 0)
            v = _capacity + v
        return v
    }

    @[inline, static]
    - func sizeRound(s: u64) => ((s + sizeof!(#^void)) / sizeof!(#^void)) * sizeof!(#^void)

    - func rehash(newCapacity: u64) {
        var oldData = _data
        var oldCapacity = _capacity;

        _capacity = newCapacity
        _size = 0
        _data = __calloc(sizeof!(#HashMapNode[K,V]) * newCapacity) !: ^HashMapNode[K,V]

        for (const i: 0..oldCapacity) {
            if (oldData.[i].hash != 0) {
                insertInternal(&&oldData.[i], true)
            }
        }
        free(oldData !: ^void)
    }

    @inline
    - func resizeMore() {
        const newSize = idealSize(_size)
        if (newSize > _capacity)
            rehash(newSize)
    }

    @inline
    - func resizeLess() {
        var newSize = idealSize(_size)
        if (newSize < _capacity)
            rehash(newSize)
    }

    - func insertInternal(item: HashMapNode[K, V], replace: bool): bool {
        if (_capacity == 0) {
            _capacity = idealSize(1)
            if (_capacity > 0) {
                _data = __calloc(sizeof!(#HashMapNode[K,V]) * _capacity) !: ^HashMapNode[K,V]
            }
        }

        var i = Hasher{}(&item.key) % _capacity
        var j = 0`u64;
        item.hash = i + 1
        while {
            const h = _data.[i].hash
            if (h == 0) {
                _size++
                _data.[i] = &&item
                return true
            }

            if (Cmp{}(&_data.[i].key, &item.key)) {
                if (replace)
                    _data.[i] = &&item
                return false
            }

            const p = probe(i, h)
            if (j > p) {
                var sspace = &&_data.[i];
                _data.[i] = &&item
                item = &&sspace
                j = p
            }
            i = (i + 1) % _capacity
            j++
        }
    }

    - func getInternal(key: K): u64? {
        if (_size == 0)
            return null

        var i = Hasher{}(&key) % _capacity
        var j = 0 as u64

        while {
            var h = _data.[i].hash
            if (h == 0 || j > probe(i, h))
                return null

            if (Cmp{}(&_data.[i].key, &key))
                return i

            i = (i + 1) % _capacity
            j++
        }
    }

    - const func getInternal(key: K): u64? {
        if (_size == 0)
            return null

        var i = Hasher{}(&key) % _capacity
        var j = 0 as u64

        while {
            var h = _data.[i].hash
            if (h == 0 || j > probe(i, h))
                return null

            if (Cmp{}(&_data.[i].key, &key))
                return i

            i = (i + 1) % _capacity
            j++
        }
    }

    func `init`(initialCapacity: u64 = 0) {
        _capacity = idealSize(initialCapacity)
        if (_capacity > 0) {
            _data = __calloc(sizeof!(#HashMapNode[K,V]) * _capacity) !: ^HashMapNode[K,V]
        }
    }

    @inline
    func `deinit`() {
        clear()
    }

    func clear(): void {
        if (_capacity) {
            for (const i: 0.._capacity) {
                if (_data.[i].hash)
                    delete _data.[i]
            }
            free(_data !: ^void)
            _data = null
            _capacity = 0
            _size = 0
        }
    }

    func remove(key: K) {
        if (_size == 0)
            return

        var i = Hasher{}(&key) % _capacity
        var j = 0
        while {
            const h =  _data.[i].hash
            if (h == 0 || j > probe(i, h))
                return

            if (Cmp{}(&_data.[i].key, &key)) {
                delete _data.[i]
                zero!(ptrof _data.[i])

                while {
                    const ni = (i + 1) %_capacity
                    const nh = &_data.[ni].hash
                    if (nh != 0 && probe(ni, nh) > 0) {
                        _data.[i] = &&_data.[ni]
                        zero!(ptrof _data.[ni])
                        i = ni
                    }
                    else {
                        break
                    }
                }

                _size--
                resizeLess()
                return
            }

            i = (i + 1) % _capacity
            j++
        }
    }

    @inline
    const func contains(key: K) => !!getInternal(&&key)

    @inline
    const func size() => _size

    @inline
    const func capacity() => _capacity

    @inline
    const func empty() => _size == 0

    #if (#V != #void) {
        func insert(key: K, value: V, replace: bool = true) {
            var data = HashMapNode[K, V]{key: &&key, value: &&value}
            const status = insertInternal(&&data, replace)
            if (status)
                resizeMore()
            return status
        }

        func get(key: K) : Optional[&V] {
            const idx = getInternal(&&key)
            if (idx) {
                return &_data.[*idx].value
            }
            return null
        }

        const func get(key: K) : Optional[&V] {
            const idx = getInternal(&&key)
            if (idx) {
                return &_data.[*idx].value
            }
            return null
        }

        @inline
        func `[]`(key: K) => get(&&key)

        @inline
        const func `[]`(key: K) => get(&&key)

        @inline
        func `[]=`(key: K, value: V) => insert(&&key, &&value)

        func `..`() {
            var i = 0;
            return () : (K, V)? => {
                while (i < _capacity) {
                    if (_data.[i].hash != 0) {
                        var j = i++
                        return (_data.[j].key, _data.[j].value)
                    }
                    i++
                }
                return null
            }
        }

        const func `..`() {
            var i = 0;
            return () : (K, V)? => {
                while (i < _capacity) {
                    if (_data.[i].hash != 0) {
                        var j = i++
                        return (_data.[j].key, _data.[j].value)
                    }
                    i++
                }
                return null
            }
        }

        func each(fun: func(key: K, value: V) -> void) {
            var i = 0
            while (i < _capacity) {
                if (_data.[i].hash != 0)
                    fun(_data.[i].key, _data.[i].value)
                i++
            }
        }

        func map[U](transform: func(key: &const K, value: &const V) -> U) {
            var output = Vector[U]();
            var i = 0
            while (i < _capacity) {
                if (_data.[i].hash != 0)
                    output.push(transform(&_data.[i].key, &_data.[i].value))
            }
            return output
        }
    }
    else {
        func insert(item: K, replace: bool = true) {
            var data = HashMapNode[K, V]{key: &&item};
            const idx = insertInternal(&&data, replace)
            if (idx)
                resizeMore()
        }

        func `..`() {
            var i = 0;
            return () : K? => {
                while (i < _capacity) {
                    if (_data.[i].hash != 0) {
                        var j = i++
                        return _data.[j].key
                    }
                    i++
                }
                return null
            }
        }

        const func `..`() {
            var i = 0;
            return () : K? => {
                while (i < _capacity) {
                    if (_data.[i].hash != 0) {
                        var j = i++
                        return _data.[j].key
                    }
                    i++
                }
                return null
            }
        }

        func each(fun: func(item: K) -> void) {
            var i = 0;
            while (i < _capacity) {
                if (_data.[i].hash != 0)
                    fun(_data.[i].key)
                i++
            }
        }

        func map[U](transform: func(item: &const K) -> U) {
            var output = Vector[U]();
            var i = 0
            while (i < _capacity) {
                if (_data.[i].hash != 0)
                    output.push(transform(&_data.[i].key))
            }
            return output
        }
    }
}

pub class HashSet[K, Hasher = Hash[K], Cmp = Equals[K]]: HashMap[K, void, Hasher, Cmp] {
    func `init`(initialCapacity: u64 = 0) {
        super(initialCapacity)
    }
}

test "Test hash set" {
    var set = HashSet[String]();
    set.insert("Hello")
    set.insert("World")

    ok!(set.contains("Hello"))
    ok!(set.contains("World"))

    set.remove("Hello")
    ok!(!set.contains("Hello"))
}

test "Test hash map" {
    var map = HashMap[String, i32]();
    map.insert("Hello", 10)
    map.["World"] = 50

    ok!(map.contains("Hello"))
    ok!(map.contains("World"))

    ok!(!!map.["Hello"])
    ok!(*map.["Hello"] == 10)
    ok!(!!map.["World"])
    ok!(*map.["World"] == 50)

    map.remove("World")
    ok!(!map.["World"])
}
