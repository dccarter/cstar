module strlib

import { hashInit, hashStringSize, memcpy} from "stdlib/utils.cxy"

pub native type cxy_string_builder_t;

pub native func cxy_string_builder_new(): cxy_string_builder_t;
pub native func cxy_string_builder_delete(this: cxy_string_builder_t) : void;
pub native func cxy_string_builder_release(this: cxy_string_builder_t) : &char;

pub native func cxy_string_builder_append_cstr0(
                    this: cxy_string_builder_t, str:  &const i8, len:  u64) : void;
pub native func cxy_string_builder_append_int(
                    this: cxy_string_builder_t, num: i64) : void;
pub native func cxy_string_builder_append_float(
                    this: cxy_string_builder_t, num: f64) : void;
pub native func cxy_string_builder_append_char(
                    this: cxy_string_builder_t, ch: wchar): void;
pub native func cxy_string_builder_append_bool(
                    this: cxy_string_builder_t, val: bool): void;

pub struct StringBuilder {
    - sb: cxy_string_builder_t

    @inline
    func `new`() =>  sb = cxy_string_builder_new()

    @inline
    func `delete`() => cxy_string_builder_delete(sb)

    @inline
    func appendString(str: string) =>
        cxy_string_builder_append_cstr0(sb, unchecked!(str, #&const i8), len!(str))

    @inline
    func appendInt(num: i64) =>
        cxy_string_builder_append_int(sb, <i64> num)

    @inline
    func appendFloat(num: f64) =>
        cxy_string_builder_append_float(sb, <f64> num)

    @inline
    func appendChar(ch: wchar) =>
        cxy_string_builder_append_char(sb, ch)


    @inline
    func appendBool(val: bool) =>
        cxy_string_builder_append_bool(sb, val)

    @inline
    func `<<`[U](val: U) {
        #if (#U == #string)
            appendString(val)
        else #if (#U == #i8 || #U == #u8 || #U == #i16 || #U == #u16 || #U == #i32 || #U == #u32 || #U == #i64 || #U == #u64)
            appendInt(val)
        else #if (#U == #f32 || #U == #f64)
            appendFloat(val)
        else #if (#U == #bool)
            appendBool(val)
        else #if (#U == #char)
             appendChar(val)

        return this
    }

    @inline
    func toString() {
        var ret = cxy_string_builder_release(sb);
        return unchecked!(ret, #string)
    }

    @inline func `str`() => toString()
}

pub struct String {
    - s: string
    - len: u64 = 0

    func `new`(s: string = "") {
        this.s = s
        this.len = len!(s)
    }

    func `new`(s: string, size: u64) {
        this.s = s
        this.len = size
    }

    @inline
    func `delete`() {
        if (s != null)
            __builtin_dealloc(s)
        s = null
    }

    func compare(other: &const String) {
        if (len != other.len)
            return <i32>(len - other.len)

        for (const i : 0..len) {
            if (s.[i] != other.s.[i])
                return <i32>s.[i] - <i32>other.s.[i]
        }

        return <i32>0
    }

    func clear() {
        if (s != null)
            __builtin_dealloc(s)
        s = ""
    }

    func append(other: &const String) unsafe {
        var newLen = len + other.len;
        var str = <&i8>__builtin_alloc(#i8, newLen + 1);
        memcpy(str, cstr!(s), len)
        memcpy(ptroff!(str + len), cstr!(other.s), other.len);
        *(ptroff!(str + newLen)) = <i8>'\0';

        return String(s, newLen);
    }

    @inline
    func `+`(other: &const String) {
        var tmp = String(s, len);
        tmp.append(other)
        return tmp
    }

    @inline
    func `==`(other: &const String) => compare(other) == 0

    @inline
    func `!=`(other: &const String) => compare(other) != 0

    @inline
    func `<`(other: &const String) => compare(other) < 0

    @inline
    func `>`(other: &const String) => compare(other) > 0

    @inline
    func `<=`(other: &const String) => compare(other) <= 0

    @inline
    func `>=`(other: &const String) => compare(other) >= 0

    @inline
    func `str`() => s

    @inline
    func toString() => s

    @inline
    func hash() => hashStringSize(hashInit(), s, len)

    @inline
    const func `[]`(idx: i32) => s[idx]

    const func `..`(cb: func(c: wchar) -> void) {
        var i = 0;
        while (i < len)
            cb(s.[i++])
    }
}
