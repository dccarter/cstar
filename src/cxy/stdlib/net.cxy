module net

import "ifaddrs.h" as ifaddrs
import "netdb.h" as netdb
import "arpa/inet.h" as arpa
import "netinet/in.h" as inet
import "sys/socket.h" as socket
import "sys/errno.h" as errno
##if (defined MACOS) {
    import "netinet6/in6.h" as inet6
}
else {
    import "bits/socket.h" as _socket
}

import "native/dns/dns.h" as dns

// This will get native sources compiled
import "./native/index.cxy"
// bring in coroutine stuff
import "./coro.cxy"

#if (defined MACOS) {
type sockaddr = socket.sockaddr
type sockaddr_in6 = inet6.sockaddr_in6
macro INET6_ADDR_ANY inet6.in6addr_any
}
else {
type sockaddr = _socket.sockaddr
type sockaddr_in6 = inet.sockaddr_in6
macro INET6_ADDR_ANY inet.in6addr_any
}

func htons(x: u16) : u16 {
    #if (BYTE_ORDER! == BIG_ENDIAN!) {
        return x
    }
    else #if (BYTE_ORDER! == LITTLE_ENDIAN!) {
        return __bswap16(x)
    }
    else {
        error!("Unknown byte order")
    }
}

@inline
func htonl(x: u32) : u32 {
    #if (BYTE_ORDER! == BIG_ENDIAN!) {
        return x
    }
    else #if (BYTE_ORDER! == LITTLE_ENDIAN!) {
        return __bswap32(x)
    }
    else {
        error!("Unknown byte order")
    }
}

@inline
func htonll(x: u64) : u64 {
    #if (BYTE_ORDER! == BIG_ENDIAN!) {
        return x
    }
    else #if (BYTE_ORDER! == LITTLE_ENDIAN!) {
        return __bswap64(x)
    }
    else {
        error!("Unknown byte order")
    }
}

@inline
func ntohs(x: u16) : u16 {
    #if (BYTE_ORDER! == BIG_ENDIAN!) {
        return x
    }
    else #if (BYTE_ORDER! == LITTLE_ENDIAN!) {
        return __bswap16(x)
    }
    else {
        error!("Unknown byte order")
    }
}

@inline
func ntohl(x: u32) : u32 {
    #if (BYTE_ORDER! == BIG_ENDIAN!) {
        return x
    }
    else #if (BYTE_ORDER! == LITTLE_ENDIAN!) {
        return __bswap32(x)
    }
    else {
        error!("Unknown byte order")
    }
}

@inline
func ntohll(x: u64) : u64 {
    #if (BYTE_ORDER! == BIG_ENDIAN!) {
        return x
    }
    else #if (BYTE_ORDER! == LITTLE_ENDIAN!) {
        return __bswap64(x)
    }
    else {
        error!("Unknown byte order")
    }
}


// This macro is defined in netinet/in.h, redefining
// C macros defined with casts cannot be imported
macro INADDR_ANY 0x00000000:u32

var cxy_DNS_conf: ^dns.dns_resolv_conf = null;
var cxy_DNS_hosts: ^dns.dns_hosts = null;
var cxy_DNS_hints: ^dns.dns_hints = null;

pub enum IPVersion {
    Any,
    V4,
    V6
}

pub struct Address {
    addr: [i8, 32]

    func `init`() {
        (addr !: ^sockaddr).sa_family = <u8>AF_UNSPEC!
    }

    func `init`(port: u16, mode: IPVersion) {
        if (mode == IPVersion.Any || mode == IPVersion.V4) {
            var ipv4 = addr !: ^inet.sockaddr_in;
            ipv4.sin_family = <u8> AF_INET!
            ipv4.sin_addr.s_addr = htonl(INADDR_ANY!)
            ipv4.sin_port = htons(port)
        }
        else {
            var ipv6 = addr !: ^sockaddr_in6;
            ipv6.sin6_family = <u8>AF_INET6!
            memcpy(ptrof ipv6.sin6_addr, ptrof INET6_ADDR_ANY!, sizeof!(INET6_ADDR_ANY!))
            ipv6.sin6_port = htons(port)
        }
    }

    func `init`(ip: string, port: u16, mode: IPVersion = IPVersion.Any) {
        switch (mode) {
            case IPVersion.Any => {
                if (!parseIpv4(ip, port))
                    parseIpv6(ip, port)
            }
            case IPVersion.V4 => {
                parseIpv4(ip, port)
            }
            case IPVersion.V6 => {
                parseIpv6(ip, port)
            }
        }
    }

    - func parseIpv4(ip: string, port: u16) : bool {
        var ipv4 = addr !: ^inet.sockaddr_in;
        var rc = arpa.inet_pton(AF_INET!, ip !: ^const char, ptrof ipv4.sin_addr);
        if (rc == 1) {
            ipv4.sin_family = <u8>AF_INET!
            ipv4.sin_port = htons(port)
            return true
        }
        else {
            ipv4.sin_family = <u8>AF_UNSPEC!
            return false
        }
    }

    - func parseIpv6(ip: string, port: u16) : bool {
        var ipv6 = addr !: ^sockaddr_in6;
        var rc = arpa.inet_pton(AF_INET6!, ip !: ^const char, ptrof ipv6.sin6_addr);
        if (rc == 1) {
            ipv6.sin6_family = <u8> AF_INET6!
            ipv6.sin6_port = htons(port)
            return true
        }
        else {
            ipv6.sin6_family = <u8>AF_UNSPEC!
            return false
        }
    }

    @inline
    const func family() => (addr !: ^sockaddr).sa_family

    @inline
    const func len() => family() == AF_INET!? sizeof!(#inet.sockaddr_in) : sizeof!(#sockaddr_in6)

    @inline
    const func port() {
        if (family() == AF_INET!)
            return ntohs((addr !: ^inet.sockaddr_in).sin_port)
        else
            return ntohs((addr !: ^sockaddr_in6).sin6_port)
    }

    func nativeAddr() => addr !: ^sockaddr
    const func nativeAddr() => addr !: ^const sockaddr

    @inline
    const func `hash`() => 0

    @inline
    const func `!!`() => family() != AF_UNSPEC!

    const func `str`(os: &OutputStream) {
        var buffer: [char, 46] = [];
        var rc = false;
        if (family() == AF_INET!) {
            var ipv4 = addr !: ^inet.sockaddr_in;
            rc = arpa.inet_ntop(AF_INET!,
                          ptrof ipv4.sin_addr,
                          buffer,
                          INET_ADDRSTRLEN!) != null;
        }
        else {
            var ipv6 = addr !: ^sockaddr_in6;
            rc = arpa.inet_ntop(AF_INET6!,
                          ptrof ipv6.sin6_addr,
                          buffer,
                          INET6_ADDRSTRLEN!) != null;
        }

        if (rc) {
            os.appendString(buffer !: string)
            os.appendChar(':')
            os.appendUnSignedInt(port())
        }
        else
            os.appendString("0.0.0.0:0000")
    }
}

pub func getLocalAddress(name: string, port: u16, mode: IPVersion = IPVersion.Any) {
    if (name.[0] == '\0':char)
        return Address(port, mode);

    var addr = Address(name, port, mode);
    if (addr)
       return addr;
    /* address is not a literal. It must be an interface name then. */
    var ifaces: ^ifaddrs.ifaddrs = null;
    @unused var rc = ifaddrs.getifaddrs(ptrof ifaces);
    assert!(rc == 0);
    assert!(ifaces != null);
    /*  Find first IPv4 and first IPv6 address. */
    var ipv4 : ^ifaddrs.ifaddrs = null;
    var ipv6 : ^ifaddrs.ifaddrs = null;

    var it: ^ifaddrs.ifaddrs = ifaces;
    while (it != null) {
        if (it.ifa_addr == null) {
            it = it.ifa_next
            continue
        }

        if (strcmp(it.ifa_name !: string, name) != 0) {
            it = it.ifa_next
            continue
        }

        var addr = (it.ifa_addr !: ^sockaddr);
        if (addr.sa_family == AF_INET!) {
            assert!(ipv4 == null)
            ipv4 = it
        }
        else if (addr.sa_family == AF_INET6!) {
            assert!(ipv6 == null)
            ipv6 = it;
        }

        if (ipv4 != null && ipv6 != null)
            break

        it  = it.ifa_next
    }

    /* choose the correct address family based on mode. */
    switch (mode) {
        case IPVersion.V4 => ipv6 = null
        case IPVersion.V6 => ipv4 = null
        default =>
    }

    if (ipv4 != null) {
       var inaddr = addr.addr !: ^inet.sockaddr_in;
        memcpy(inaddr, ipv4.ifa_addr, sizeof!(#inet.sockaddr_in));
        inaddr.sin_port = htons(port);
    }
    else if (ipv6 != null) {
        var inaddr = addr.addr !: ^sockaddr_in6;
        memcpy(inaddr, ipv6.ifa_addr, sizeof!(#sockaddr_in6))
        inaddr.sin6_port = htons(port)
        printf("size is %lu\n", sizeof!(#sockaddr_in6))
    }

    ifaddrs.freeifaddrs(ifaces);
    return addr
}

pub async func getRemoteAddress(name: string, port: u16, mode: IPVersion = IPVersion.Any) {
    var rc: i32 = 0;
    var addr = Address(name, port, mode);
    if(addr)
       return addr

    /* Load DNS config files, unless they are already chached. */
    if (cxy_DNS_conf == null) {
        /* TODO: Maybe re-read the configuration once in a while? */
        cxy_DNS_conf = dns.dns_resconf_local(ptrof rc)
        assert!(cxy_DNS_conf != null)
        cxy_DNS_hosts = dns.dns_hosts_local(ptrof rc)
        assert!(cxy_DNS_hosts != null)
        cxy_DNS_hints = dns.dns_hints_local(cxy_DNS_conf, ptrof rc)
        assert!(cxy_DNS_hints != null)
    }

    /* Let's do asynchronous DNS query here. */
    var resolver = dns.dns_res_open(
        cxy_DNS_conf,
        cxy_DNS_hosts,
        cxy_DNS_hints,
        null,
        null,
        ptrof rc);
    assert!(resolver != null)
    var ports: [char, 8]  = [];
    sprintf(ports !: ^char, "%d", port)

    var hints = netdb.addrinfo{};
    memset(ptrof hints, 0, sizeof!(hints))
    hints.ai_family = PF_UNSPEC!;

    var ai = dns.dns_ai_open(
        name !: ^const char,
        ports !: ^const char,
        dns.dns_type.DNS_T_A,
        ptrof hints,
        resolver,
        ptrof rc
    );

    assert!(ai != null)
    dns.dns_res_close(resolver)

    var ipv4 : ^netdb.addrinfo = null;
    var ipv6 : ^netdb.addrinfo = null;
    var it : ^netdb.addrinfo = null;
    while (true) {
        rc = dns.dns_ai_nextent(ptrof it, ai)
        if (rc == EAGAIN!) {
            var fd = dns.dns_ai_pollfd(ai);
            assert!(fd >= 0)
            fdWaitRead(fd)
            continue
        }

        if (rc == ENOENT!)
            break

        if (ipv4 == null && it != null && it.ai_family == AF_INET!) {
            ipv4 = it
        }
        else if (ipv6 == null && it != null && it.ai_family == AF_INET6!) {
            ipv6 = it
        }
        else {
            free(it)
        }

        if (ipv4 != null && ipv6 != null)
            break
    }

    switch (mode) {
        case IPVersion.V4 =>
            if (ipv6 != null) {
                free(ipv6)
                ipv6 = null
            }

        case IPVersion.V6 =>
            if (ipv4 != null) {
                free(ipv4)
                ipv4 = null
            }

        case IPVersion.Any =>
            if(ipv4 != null && ipv6 != null) {
                free(ipv6)
                ipv6 = null
            }

        default =>
    }

    if (ipv4 != null) {
        var inaddr = addr.addr !: ^inet.sockaddr_in;
        memcpy(inaddr, ipv4.ai_addr, sizeof!(#inet.sockaddr_in));
        inaddr.sin_port = htons(port);
        free(ipv4);
    }
    else if (ipv6) {
        var inaddr = addr.addr !: ^sockaddr_in6;
        memcpy(inaddr, ipv6.ai_addr, sizeof!(#sockaddr_in6))
        inaddr.sin6_port = htons(port)
        free(ipv6);
    }
    else {
        (addr.addr !: ^sockaddr).sa_family = <u8>AF_UNSPEC!;
    }

    dns.dns_ai_close(ai)
    return addr
}


