module json

pub func toJson[T](os: &OutputStream, it: const T) : void {
    #if (T.isChar) {
        os << <i64>it
    }
    else #if (T.isNumber || T.isBoolean) {
        os << it
    }
    else #if (T.isString) {
        os << '"' << it << '"'
    }
    else #if (T.isOptional) {
        if (it) {
            const value = *it;
            toJson[#{typeof!(value)}](os, value)
        }
        else {
            os << "null"
        }
    }
    else #if (T.isStruct) {
        os << "{";
        #const first = true;
        #for (const member: T.members) {
            #if (member.isField) {
                #if (first == false) {
                    os << ", "
                }

                os << '"' << #{member.name} << "\": ";
                toJson[#{member.Tinfo}](os, it.#{mk_ident!(member.name)})
                #{first = false}
            }
        }
        os << "}"
    }
    else #if (T.isTuple) {
        os << "["
        @consistent
        #for (const i: 0..T.membersCount) {
            #if (i != 0) {
                os << ", ";
            }

            var member = it.#{i};
            toJson(os, member)
        }
        os << "]"
    }
    else #if (T.isSlice || T.isArray) {
        os << '[';
        var first = true;
        for (const member, _: it) {
            if (!first) os << ", "

            toJson[#{T.elementType}](os, member)

            first = false
        }
        os << ']'
    }
    else {
        // give up here
        error!("type `{t}` is not a JSON-able type", T)
    }
}

test "Json encode" {
    var s = String();
    toJson(&s, 10:i32)
    ok!(s == "10")

    s.clear()
    toJson(&s, {a: 10, b: true, c: "world", d: 'c'})
    ok!(s == "{\"a\": 10, \"b\": true, \"c\": \"world\", \"d\": 99}")

    s.clear()
    toJson(&s, (10:u32, true, "World"))
    ok!(s == "[10, true, \"World\"]")

    s.clear()
    toJson(&s, [10:u32, 20, 30])
    ok!(s == "[10, 20, 30]")

    var x:i32? = 100;
    s.clear()
    toJson(&s, x)
    ok!(s == "100")

    x = null
    s.clear()
    toJson(&s, x)
    ok!(s == "null")
}
