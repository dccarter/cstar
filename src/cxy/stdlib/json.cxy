module json

pub func toJson[T](@transient os: OutputStream, it: const T) : void {
    #if (T.isNumber || T.isBoolean || T.isChar) {
        os << it
    }
    else #if (T.isString) {
        os << '"' << it << '"'
    }
    else #if (T.isOptional) {
        if (it) {
            const value = *it;
            toJson[#{typeof!(value)}](os, value)
        }
    }
    else #if (T.isStruct) {
        os << "{";
        #const first = true;
        #for (const member: T.members) {
            #if (member.isField) {
                #if (first == false) {
                    os << ", "
                }

                os << '"' << #{member.name} << "\": ";
                toJson[#{member.Tinfo}](os, it.#{mk_ident!(member.name)})
                #{first = false}
            }
        }
        os << "}"
    }
    else #if (T.isTuple) {
        os << "["
        @consistent
        #for (const i: 0..T.membersCount) {
            #if (i != 0) {
                os << ", ";
            }

            var member = it.#{i};
            toJson(os, member)
        }
        os << "]"
    }
    else #if (T.isSlice) {
        os << '[';
        var first = true;
        for (const member, _: it) {
            if (!first) os << ", "

            toJson[#{T.elementType}](os, member)

            first = false
        }
        os << ']'
    }
    else {
        // give up here
        error!("type `{t}` is not a JSON-able type", T)
    }
}
