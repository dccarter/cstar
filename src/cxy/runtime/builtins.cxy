
pub extern func strlen(s: string) : u64
pub extern func sprintf(s: ^char, fmt: string, ...args: auto) : i64
pub extern func strcmp(s1: const string, s2: const string): i32
pub extern func strncmp(s1: const string, s2: const string, len: u64): i32
pub extern func strcasecmp(s1: const string, s2: const string): i32
pub extern func strncasecmp(s1: const string, s2: const string, len: u64): i32
pub extern func memmove(dst: ^void, src: ^const void, num: u64) : ^void
pub extern func memset(ptr: ^void, value: i32, num: u64) : ^void
pub extern func memcpy(dst: ^void, src: ^const void, n: u64): ^void
pub extern func memcmp(lhs: ^const void, rhs: ^const void, n: u64): i32
pub extern func malloc(s: u64): ^void
pub extern func realloc(ptr: ^void, s: u64): ^void
pub extern func free(ptr: ^void): void
pub extern func abort(): void;
pub extern func exit(code: i32): void
pub extern func printf(s: string, ...args: auto): i32
pub extern func write(fd: i32, buf: ^const void, len: u64) : i64
pub extern func strtoll(str: ^const char, endptr: ^ ^const char, base: i32): i64
pub extern func strtod(str: ^const char, endptr: ^ ^const char): f64
pub extern func toupper(c: i32): i32

macro alloca(T) =( mk_bc!(bfiAlloca!, #^void, T!) )
macro zero(V) { mk_bc!(bfiZeromem!, #void, V!) }

func __cxy_assert_abort(file: string, line: u64, column: u64) {
    var buf: [char, 64];
    write(2, "assertion failed: ", 18)
    write(2, file, strlen(file))
    var len = sprintf(buf, ":%u:%u\n", line, column);
    write(2, buf, len)
    abort()
}

@[pure, inline]
pub func __cxy_assert(cond: bool, file: string, line: u64, column: u64) {
    if (!cond) {
        __cxy_assert_abort(file, line, column)
    }
}

#if (!defined DISABLE_ASSERT) {
    macro assert(cond) { __cxy_assert(cond!, file!, line!, column!) }
}
else {
    macro assert(cond) ()
}

#if (defined MACOS) {
    pub extern func __error(): ^i32
    macro errno() =(*__error())
}
else {
    pub extern func __errno_location(): ^i32
    macro errno() =(*__errno_location())
}

@[pure]
pub func __cxy_panic(file: string, line: u64, column: u64, msg: string) {
    var buf: [char, 64];
    write(2, "panic: ", 7)
    write(2, msg, strlen(msg))
    write(2, "\n  @", 4)
    write(2, file, strlen(file))
    var len = sprintf(buf, ":%u:%u\n", line, column);
    write(2, buf, len)
    #if (defined __DEBUG && defined TRACE_MEMORY) {
        (TRACE_MEMORY!)("flush", file, line, null)
    }
    abort()
}

macro panic(msg) { __cxy_panic(file!, line!, column!, msg!) }

@inline
pub func __bswap16(x: u16) => <u16>(((x >> 8) & 0xff) | ((x & 0xff) << 8))

@inline
pub func __bswap32(x: u32) => (
      ((x & 0xff000000:u32) >> 24)
    | ((x & 0x00ff0000:u32) >> 8)
    | ((x & 0x0000ff00:u32) << 8)
    | ((x & 0x000000ff:u32) << 24)
)

@inline
pub func __bswap64(x: u64) => (
      ((x & 0xff00000000000000:u64) >> 56)
    | ((x & 0x00ff000000000000:u64) >> 40)
    | ((x & 0x0000ff0000000000:u64) >> 24)
    | ((x & 0x000000ff00000000:u64) >> 8)
    | ((x & 0x00000000ff000000:u64) << 8)
    | ((x & 0x0000000000ff0000:u64) << 24)
    | ((x & 0x000000000000ff00:u64) << 40)
    | ((x & 0x00000000000000ff:u64) << 56)
)

type sptr = ^void

struct __mem {
    refs: u32
    magic: u32
    dctor: func(ptr: sptr) -> void
}

#const MEMORY_MAGIC = 0xAEAEAEAE:u32

@[pure, linkage("External"), noinline, optimize(0), __override_builtin("__smart_ptr_alloc")]
func __smart_ptr_alloc(size: u64, dctor: func(ptr: sptr) -> void = null) {
    var ptr = malloc(size + sizeof!(__mem));
    if (ptr == null) {
        return ptr !: sptr
    }

    var mem = ptr !: ^__mem;
    mem.magic = #{MEMORY_MAGIC}
    mem.refs = 1
    mem.dctor = dctor
    return ((ptr !: ^u8) + sizeof!(__mem)) !: sptr
}

@[pure, linkage("External"), noinline, optimize(0)]
func __smart_ptr_get(ptr: sptr) : sptr {
    if (ptr == null)
        return null

    var mem = ((ptr !: ^u8) + (-sizeof!(__mem))) !: ^__mem;
    if (mem.magic != #{MEMORY_MAGIC}) {
        panic!("invalid pointer")
    }
    mem.refs++
    return ptr
}

@[pure, linkage("External"), noinline, optimize(0)]
func __smart_ptr_drop(ptr: sptr) {
    if (ptr == null)
        return false

    var mem = ((ptr !: ^u8) + (-sizeof!(__mem))) !: ^__mem;
    if (mem.magic != #{MEMORY_MAGIC}) {
        panic!("invalid smart pointer")
    }

    mem.refs--
    if (mem.refs == 0) {
        // invoke destructor if available
        if (mem.dctor != null) {
            mem.dctor(ptr)
        }

        mem.magic = 0
        free(mem !: ^void)
        return true
    }
    return false
}

#if (defined __DEBUG && defined TRACE_MEMORY) {

@[pure, linkage("External")]
func __trace_memory_stdout(tag: string, path: string, line: u64, ptr: sptr) {
    printf(" mem(%-5.5s: %p) @ %s:%llu\n", tag, ptr, path, line)
}

pub extern func __trace_memory_custom(tag: string, path: string, line: u64, ptr: sptr) : void

@[pure, linkage("External")]
func __smart_ptr_alloc_trace(size: u64, dctor: func(ptr: sptr) -> void, path: string, line: u64) {
    var ptr = __smart_ptr_alloc(size, dctor);
    (TRACE_MEMORY!)("alloc", path, line, ptr)
    return ptr
}

@[pure, linkage("External")]
func __smart_ptr_get_trace(ptr: sptr, path: string, line: u64) {
    (TRACE_MEMORY!)("get", path, line, ptr)
    return __smart_ptr_get(ptr)
}

@[pure, linkage("External")]
func __smart_ptr_drop_trace(ptr: sptr, path: string, line: u64) {
    (TRACE_MEMORY!)("drop", path, line, ptr)
    if (__smart_ptr_drop(ptr))
        (TRACE_MEMORY!)("freed", path, line, ptr)
}

}

@[pure, inline]
pub func __calloc(size: u64) => memset(malloc(size), 0, size)

/* Builtin Optional Type */
pub struct __Optional[T] {
    /* @note: Do not change the order of these members */
    ok: bool = false;
    val: T

    @inline func `init`() {
        ok = false
        zero!(ptrof val)
    }

    @inline func `init`(value: T) { val = &&value; ok = true }

    func `destructor`() {
        if (ok) {
            #if (T.isClass || T.hasReferenceMembers)
                delete val
            else #if (has_member!(#T, "op__destructor", #func() -> void))
                val.op__destructor()
        }
    }

    @inline func `copy`() {
        #if (T.isClass || T.hasReferenceMembers)
            return This{ ok: ok, val: __copy!(val) }
        else #if (has_member!(#T, "op__copy", #func() -> T))
            return This{ ok: ok, val: val.op__copy() }
        else
            return This{ ok: ok, val: val }
    }

    @inline func `!!`() => ok
    @inline func `deref`() { return val }
    @optimize(0) func move() { ok = false; return &&val }
    @inline const func `!!`() => ok
    @inline const func `deref`() { return val }
}

/* Creates a valid optional value */
@inline
pub func Some[T](value: T) => __Optional[T]{ ok: true, val: &&value }

/* Creates an invalid optional value */
@inline
pub func None[T]() => __Optional[T]()

pub type HashCode = u32
#const FNV_32_PRIME = 0x01000193:u32

@inline
pub func hash_fnv1a_uint8(h: HashCode, x: u8) : HashCode
{
    return (h ^ x) * #{FNV_32_PRIME}
}

pub func hash_fnv1a_uint16(h: HashCode, x: u16) =>
    hash_fnv1a_uint8(hash_fnv1a_uint8(h, <u8>(x & 0xff)), <u8>(x >> 8))

pub func hash_fnv1a_uint32(h: HashCode, x: u32) =>
    hash_fnv1a_uint16(hash_fnv1a_uint16(h, <u16>(x & 0xffff)), <u16>(x >> 16))

pub func hash_fnv1a_uint64(h: HashCode, x: u64) =>
    hash_fnv1a_uint32(hash_fnv1a_uint32(h, <u32>(x & 0xffffffff)), <u32>(x >> 32))

pub func hash_fnv1a_ptr(h: HashCode, ptr: ^const void) =>
    hash_fnv1a_uint64(h, ptr !: u64)

pub func hash_fnv1a_string(h: HashCode, str: string)
{
    var i = 0;
    while (str.[i] != '\0':char) {
        h = hash_fnv1a_uint8(h, <u8>str.[i]);
        i++
    }
    return h;
}

pub func hash_fnv1a_n_string(h: HashCode, str: string, len: u64)
{
    var i = 0;
    while (i < len) {
        h = hash_fnv1a_uint8(h, <u8>str.[i]);
        i++
    }
    return h;
}

pub func hash_fnv1a_string_n_igc(h: HashCode, str: ^const char, len: u64)
{
    var i = 0;
    while (i < len) {
        var c = toupper(<i32>str.[i]);
        h = hash_fnv1a_uint8(h, <u8>c);
        i++
    }
    return h;
}

pub func hash_fnv1a_string_igc(h: HashCode, str: const string)
{
    var i = 0;
    while (str.[i] != '\0':char) {
        var c = toupper(<i32>str.[i]);
        h = hash_fnv1a_uint8(h, <u8>c);
        i++
    }
    return h;
}

@[pure]
pub func hash_fnv1a_bytes(h: HashCode,
                         ptr: ^const void,
                         size: u64)
{
    const p = ptr !: ^const u8;
    for (const i: 0..size-1)
        h = hash_fnv1a_uint8(h, p.[i]);
    return h
}

@[pure]
pub func hash[T](val: &const T, @unused init: HashCode = #{FNV_32_PRIME}) : HashCode {
    #if (#T == #string) {
        return hash_fnv1a_string(init, val)
    }
    else #if (#T == #i8 || #T == #u8 || #T == #char) {
        return hash_fnv1a_uint8(init, <u8>val)
    }
    else #if (#T == #i16 || #T == #u16) {
        return hash_fnv1a_uint16(init, <u16>val)
    }
    else #if (#T == #i32 || #T == #u32 || #T == #wchar) {
        return hash_fnv1a_uint32(init, <u32>val)
    }
    else #if (T.isFloat || #T == #i64 || #T == #u64) {
        return hash_fnv1a_uint64(init, <u64>val)
    }
    else #if (T.isEnum) {
        return hash_fnv1a_uint64(init, <u64>val)
    }
    else #if (T.isTuple) {
        var code = init;
        #for (const i: 0..T.membersCount) {
            code = hash(val.#{i}, code)
        }
        return code
    }
    else #if (T.isArray || T.isSlice) {
        var code = init;
        for (const x: val) {
            code = hash(x, code)
        }
        return code
    }
    else #if (T.isUnion) {
        var code = init;
        match (val) {
            #for (const i: 0..#{T.membersCount}) {
                case #{typeat!(T, i)} as y => {
                    code = hash(#{i}, code)
                    code = hash(y, code)
                }
            }
        }
        return code;
    }
    else {
        // this will fail if T does not implement hash function
        require!(
            has_member!(#T, "op__hash", #const func() -> HashCode),
            "type '{t}' must implement `hash` operator", #T
        )
        return val.op__hash()
    }
}

pub struct __string {
    s: string = null;
    _size: u64 = 0;

    @inline func `init`() {}

    @inline func `init`(s: string) {
        this.s = s
        if ((s !: ^void) != null)
            _size = strlen(s)
    }

    func `init`(s: string, size: u64) {
        this.s = s
        _size = size
    }

    const func compare(other: &This) {
        if (_size == other._size)
            return strncmp(this.s, other.s, _size)
        else if (_size < other._size)
            return -1
        else
            return 1
    }

    @inline const func `==`(other: &This) => compare(other) == 0
    @inline const func `!=`(other: &This) => compare(other) != 0
    @inline const func `<`(other: &This) => compare(other) < 0
    @inline const func `<=`(other: &This) => compare(other) <= 0
    @inline const func `>`(other: &This) => compare(other) > 0
    @inline const func `>=`(other: &This) => compare(other) >= 0
    @inline const func `[]`(idx: i64) => s.[idx]
    @inline const func `hash`() => hash_fnv1a_n_string(#{FNV_32_PRIME}, this.s, _size)
    @inline const func `copy`() { return This(s, _size) }

    @inline const func size() => _size
    @inline const func data() => s !: ^const char
    @inline const func str() => s
    @inline const func empty() => _size == 0
    @inline const func isnt() {
        return !empty() && s.[_size] == '\0':char
    }

    const func substr(start: u64, count: i64 = -1) {
        assert!(start <= _size)
        if (count == -1)
            count = <i64>(_size - start);
        else
            assert!(count >= 0 && count <= (_size - start))
        var q = s !: ^const char;
        return This(ptroff!(q + start) !: string, count)
    }

    const func copyto(buf: ^char, size: u64) {
        assert!(size > _size)
        memcpy(buf !: ^void, s !: ^void, _size)
        buf.[_size] = '\0':char
    }

    const func toi[T](base: i32 = 0) {
        require!(T.isInteger, "type '{t}' unsupported by `__string.toi`", #T)
        var ep: ^const char = null;
        return <T>strtoll(s !: ^const char, ptrof ep, base);
    }

    const func tof[T]() {
        require!(T.isFloat, "type '{t}' unsupported by `__string.tof`", #T)
        var ep: ^const char;
        return <T>strtod(s !: ^const char, ptrof ep);
    }

    func indexOf(ch: char) : __Optional[u64] {
        var i = 0:u64;
        while (i < _size) {
            if (s.[i] == ch)
                return Some(i)
            i++
        }
        return None[u64]()
    }

    func rIndexOf(ch: char) : __Optional[u64] {
        if (_size == 0)
            return None[u64]()

        var i = _size - 1;
        while (i > 0) {
            if (s.[i] == ch)
                return Some(i)
            i--
        }
        return None[u64]()
    }

    const func endswith(suffix: This) {
        if (suffix.size() > size())
            return false;
        return substr(size() - suffix.size()) == suffix
    }

    const func startswith(suffix: This) {
        if (suffix.size() > size())
            return false;
        return substr(0:u64, <i64>suffix.size()) == suffix
    }

    const func find(part: This) : __Optional[u64] {
        if (part.empty())
            return empty()? None[u64]() : Some(_size - 1);
        var i = _size;
        var j = 0:u64;
        var p = s !: ^const char;
        while (i >= part._size) {
            i--
            if (memcmp(ptroff!(p + j) !: ^const void, part.s !: ^const void, part._size) == 0)
                return Some(j)
            j++
        }
        return None[u64]()
    }

    const func rfind(part: This) : __Optional[u64] {
        if (_size >= part._size) {
            if (part.empty())
                return empty()? None[u64]() : Some(_size - 1);

            var j = <i64>(_size - part._size);
            var p = s !: ^const char;
            while (j >= 0) {
                if (memcmp(ptroff!(p + j) !: ^const void, part.s !: ^const void, part._size) == 0)
                    return Some(<u64>j)
                j--
            }
        }
        return None[u64]()
    }
}

#const CXY_STRING_BUILDER_DEFAULT_CAPACITY = 32:u64

@[inline, pure]
pub func isnull[T](cls: &const T) {
    require!(T.isPointer || T.isClass, "isnull can only be used on class types")
    return (cls !: ^const void) == null
}

pub class OutputStream {
    virtual func append(str: ^const void, size: u64): void

    @inline
    func appendString(s: string) : void {
        append(s !: ^const void, strlen(s))
    }

    @inline
    func appendString(s: &const __string) : void {
        append(s.s !: ^const void, s.size())
    }

    func appendSignedInt(num: i64) {
        var buf: [char, 64];
        const len = sprintf(buf, "%lld", num);
        append(buf !: ^const void, len)
    }

    func appendUnSignedInt(num: u64) {
        var buf: [char, 32];
        const len = sprintf(buf, "%llu", num);
        append(buf !: ^const void, len)
    }

    func appendFloat(num: f64) {
        var data: [char, 32];
        const len = sprintf(data, "%g", num);
        append(data !: ^const void, len)
    }

    func appendChar(ch: wchar) {
        var data: [char, 5];
        var size: u64 = 0;
        if (ch < 0x80) {
            data.[0] = <char> ch
            size = 1
        }
        else if (ch < 0x800) {
            data.[0] = <char> (0xC0 | (ch >> 6))
            data.[1] = <char> (0x80 | (ch & 0x3f))
            size = 2;
        }
        else if (ch < 0x10000) {
            data.[0] = <char> (0xE0 | (ch >> 12))
            data.[1] = <char> (0x80 | ((ch >> 6) & 0x3f))
            data.[2] = <char> (0x80 | (ch & 0x3f))
            size = 3
        }
        else if (ch < 0x200000) {
            data.[0] = <char> (0xF0 | (ch >> 16))
            data.[1] = <char> (0x80 | ((ch >> 12) & 0x3f))
            data.[2] = <char> (0x80 | ((ch >> 6) & 0x3f))
            data.[3] = <char> (0x80 | (ch & 0x3f))
            size = 4
        }
        else {
            // TODO raise OutOfRangeException()
        }
        append(data !: ^const void, size)
    }


    @inline
    func appendBool(val: bool) {
        if (val)
            append("true" !: ^const void, 4:u64)
        else
            append("false" !: ^const void, 5:u64)
    }

    func appendPointer[T](ptr: &const T) {
        var data: [char, 32];
        const len = sprintf(data, "%p", ptr !: ^const void);
        append(data, len)
    }

    @transient
    func `<<`[U](val: &const U) : &OutputStream {
        #if (U.isString)
            #if (U.isClass)
                if (isnull(val))
                    appendString("null")
                else
                    append(val._data !: ^const void, val.size())
            else
                appendString(val)
        else #if (U.isInteger)
            appendSignedInt(<i64>val)
        else #if (U.isFloat)
            appendFloat(val)
        else #if (U.isBoolean)
            appendBool(val)
        else #if (#U == #wchar || #U == #char)
             appendChar(val)
         else #if(#U == __string)
            appendString(val.s)
        else #if (U.isEnum) {
             switch(val) {
                #for (const V: U.members) {
                    case U.#{mk_ident!(V.name)} => {
                        #const attr = V.attributes.["str"];
                        #if (attr) {
                            appendString(#{attr.[0]})
                        }
                        else {
                            appendString(#{U.name})
                            appendChar('.')
                            appendString(#{V.name})
                        }
                    }
                }
            }
        }
        else #if (U.isOptional) {
            if (val)
                this << *val
            else
                appendString("null")
        }
        else #if (U.isClass) {
            require!(
                has_member!(#U, "op__str", #const func (_: &OutputStream) -> void),
                "type {t} does not implement `str` operator",
                #U
            )
            if (isnull(val))
                appendString("null")
            else
                val.op__str(this)
        }
        else #if (U.isStruct) {
            require!(
                has_member!(#U, "op__str", #const func (_: &OutputStream) -> void),
                "type {t} does not implement `str` operator",
                #U
            )
            val.op__str(this)
        }
        else #if (U.isTuple) {
            this.appendChar('(')
            #for (const i: 0..U.membersCount) {
                #if (i != 0)
                    this.appendString(", ")
                this << val.#{i}
            }
            this.appendChar(')')
        }
        else #if (U.isArray || U.isSlice) {
            this.appendChar('[')
            for (const i: 0..len!(val)) {
                if (i != 0)
                    this.appendString(", ")
                this << val.[i]
            }
            this.appendChar(']')
        }
        else #if (U.isUnion) {
            match (val) {
                #for (const i: 0..#{U.membersCount}) {
                    case #{typeat!(U, i)} as y => this << y
                }
            }
        }
        else #if (U.isPointer) {
            this.appendPointer[#{U.pointedType}](val)
        }
        else #if (U.isFunction) {
            this.appendString("TODO//function")
        }
        else {
            error!("type {t} not supported by OutputStream::`<<` operator", #U)
        }
        return &this
    }
}

pub class String : OutputStream {
    - _capacity: u64 = 0;
    - _size: u64 = 0;
    - _data: ^char = null;

    - func grow(growSize: u64) {
        const newSize = _size + growSize;
        if (this._data == null) {
            this._data = <^char> malloc(growSize + 1)
            this._capacity = growSize
        }
        else if (this._capacity < newSize) {
            while (this._capacity < newSize) {
                this._capacity <<= 1
            }
            this._data = <^char> realloc(this._data !: ^void, this._capacity+1)
        }
    }

    @inline
    func `init`() {}

    @inline
    func `init`(str: string) {
        super.appendString(str)
    }

    @inline
    func `init`(str: ^const char, len: u64) {
        append(str, len)
    }

    @inline
    func `init`(str: __string) {
        super.appendString(&str)
    }

    @inline
    func `deinit`() {
        clear()
    }

    @static
    func `destructor_fwd`(ptr: ^void) {
        (ptr !: This).op__deinit()
    }

    func clear() : void {
        if (_data != null) {
            free(this._data)
            this._data = null
            this._capacity = 0
            this._size = 0
        }
    }

    func append(str: ^const char, size: u64) : void {
        if (size) {
            grow(size)
            var p = this._data + this._size;
            memmove(p, str, size)
            this._size += size
            this._data.[this._size] = <char>'\0'
        }
    }

    func indexOf(ch: char) : __Optional[u64] {
        var i = 0:u64;
        while (i < _size) {
            if (_data.[i] == ch)
                return Some(i)
            i++
        }
        return None[u64]()
    }

    func rIndexOf(ch: char) : __Optional[u64] {
        if (_size == 0)
            return None[u64]()

        var i = _size - 1;
        while (i > 0) {
            if (_data.[i] == ch)
                return Some(i)
            i--
        }
        return None[u64]()
    }

    @inline
    func `+`[U](other: &const U) => this << other

    @inline
    func `str`(sb: OutputStream) {
        sb.append(_data, _size)
    }

    @inline
    const func `hash`() {
        if (this._data) {
            return hash_fnv1a_bytes(#{FNV_32_PRIME}, this._data, this._size)
        }
        else {
            return #{FNV_32_PRIME}
        }
    }

    const func compare(other: ^const char, size: u64) {
        if (_size != size)
            return <i32>(_size - size)

        for (const i : 0.._size) {
            if (_data.[i] != other.[i])
                return (<i32>_data.[i]) - (<i32>other.[i])
        }

        return <i32>0
    }

    @inline
    const func compare(other: &const String) =>
        compare(other._data, other._size)

    @inline
    const func compare(other: const string) =>
        compare(other !: ^const char, strlen(other))

    @inline
    const func `==`(other: &const String) => compare(other) == 0

    @inline
    const func `!=`(other: &const String) => compare(other) != 0

    @inline
    const func `<`(other: &const String) => compare(other) < 0

    @inline
    const func `>`(other: &const String) => compare(other) > 0

    @inline
    const func `<=`(other: &const String) => compare(other) <= 0

    @inline
    const func `>=`(other: &const String) => compare(other) >= 0

    @inline
    const func `==`(other: const string) => compare(other) == 0

    @inline
    const func `!=`(other: const string) => compare(other) != 0

    @inline
    const func `<`(other: const string) => compare(other) < 0

    @inline
    const func `>`(other: const string) => compare(other) > 0

    @inline
    const func `<=`(other: const string) => compare(other) <= 0

    @inline
    const func `>=`(other: const string) => compare(other) >= 0

    @inline
    const func `[]`(idx: u32) {
        assert!(idx < _size)
        return this._data.[idx]
    }

    const func `..`() {
        var i:i32 = 0;
        return () : __Optional[(char, i32)] => {
            if (i < _size)
                return Some((_data.[i], i++))
            else
                return None[(char, i32)]()
        }
    }

    @inline const func size() => _size
    @inline const func capacity() => _capacity
    @inline const func data() => _data
    @inline const func empty() => _size == 0
    @inline const func str() => _data !: string
    @inline const func __str() => __string(_data !: string, _size)
    @inline const func substr(start: u64, count: i64 = -1) => __str().substr(start, count)
    @inline const func endswith(suffix: String) => __str().endswith(suffix.__str())
    @inline const func endswith(suffix: __string) => __str().endswith(suffix)
    @inline const func endswith(suffix: string) => __str().endswith(suffix)
    @inline const func startswith(suffix: String) =>  __str().startswith(suffix.__str())
    @inline const func startswith(suffix: __string) => __str().startswith(suffix)
    @inline const func startswith(suffix: string) =>  __str().startswith(suffix)
}

pub class BufferedOutputStream: OutputStream {
    - _buffer: ^char
    - _capacity: u64
    - _size: u64

    func `init`(capacity: u64 = 1024) {
        _capacity = capacity
        _size = 0
        _buffer = malloc(capacity) !: ^char
    }

    virtual func flush(str: ^const void, size: u64): void

    func append(data: ^const void, size: u64) {
        var room = _capacity - _size;
        if (size > room && _size > 0) {
            flush(_buffer, _size)
            room = _capacity
            _size = 0
        }
        if (size < room) {
            var src = data !: ^const char;
            memcpy(ptrof _buffer.[_size], src, size)
            _size += size
        }
        else {
            flush(data, size)
        }
    }

    func `deinit`() {
        if (_buffer) {
            if (_size > 0)
                flush(_buffer, _size)
            free(_buffer !: ^void)
            _buffer = null
            _size = 0
        }
    }
}

pub class FileOutputStream : OutputStream {
    - fd: i32
    func `init`(fd: i32 = 0) {
        this.fd = fd
    }

    func append(str: ^const char, size: u64) {
        if (size) {
           write(fd, str, size)
        }
    }
}

pub struct Slice[T] {
    - data: ^T
    - len: u64

    func `init`(data: ^T, len: u64) {
        this.data = data
        this.len = len
    }

    @inline
    func `[]=`(index:  i64, data: T) {
        assert!(index < len)
        this.data.[index] = data
    }

    @inline
    func `[]`(index:  i64) {
        assert!(index < len)
        return this.data.[index]
    }

    @inline
    const func `[]`(index:  i64) {
        assert!(index < len)
        return this.data.[index]
    }

    const func `..`() {
        var i: i32 = 0;
        return () : __Optional[(T, i32)] => {
            if (i < len)
                return Some((data.[i], i++))
            return None[(T, i32)]()
        }
    }

    #if (!T.isUnresolved) {
        const func `str`(sb: OutputStream) {
            sb.appendChar('[')
            for (const i: 0..len) {
                if (i != 0)
                    sb.appendString(", ")
                sb << data.[i]
            }
            sb.appendChar(']')
        }
    }
}

pub func ref[T](ptr: T) {
    __smart_ptr_get(ptr !: sptr)
    return ptr
}

@[linkage("External")]
func __tuple_dctor[T](tup: &T) {
    require!(T.isTuple, "expecting a tuple type, got `{t}`", #T)
    #for (const i : 0 .. T.membersCount) {
        #const M = typeat!(T, #{i});
        #if (M.isClass || M.hasReferenceMembers)
                delete tup.#{i}
        else #if (has_member!(#M, "op__destructor", #func() -> void))
            tup.#{i}.op__destructor()
    }
}

@[linkage("External")]
func __union_dctor[T](obj: &T) {
    require!(T.isUnion, "expecting a tuple type, got `{t}`", #T)
    match (obj) {
        #for (const i: 0..#{T.membersCount}) {
            case #{typeat!(T, i)} as y => {
                #const M = typeat!(T, i);
                #if (M.isClass || M.hasReferenceMembers)
                    __forcedrop!(y)
                else #if (has_member!(#M, "op__destructor", #func() -> void))
                    y.op__destructor()
            }
        }
    }
}

@[linkage("External")]
func __tuple_copy[T](tup: &T) {
    require!(T.isTuple, "expecting a tuple type, got `{t}`", #T)
    #const nodes = mk_ast_list!();
    #for (const member: 0 .. T.membersCount) {
        #const M = typeat!(T, member);
        #if (M.isClass || M.hasReferenceMembers) {
            ast_list_add!(
                #{nodes},
                __copy!(tup.#{mk_integer!(member)})
            )
        }
        else #if (has_member!(#M, "op__copy", #func() -> M )) {
            ast_list_add!(
                #{nodes},
                tup.#{mk_integer!(member)}.op__copy()
            )
        }
        else {
            ast_list_add!(
                #{nodes},
                tup.#{mk_integer!(member)}
            )
        }
    }

    return mk_tuple_expr!(#{nodes})
}

@[linkage("External")]
func __union_copy[T](obj: &T) : T {
    require!(T.isUnion, "expecting a union type, got `{t}`", #T)

    match (obj) {
        #for (const member: 0 .. T.membersCount) {
            case #{typeat!(T, member)} as y => {
                #const M = typeat!(T, member);
                #if (M.isClass || M.hasReferenceMembers ) {
                    return __copy!(y)
                }
                else #if (has_member!(#M, "op__copy", #func() -> M )) {
                    return y.op__copy()
                }
                else
                    return <M>y
            }
        }
    }
}

macro stackAlloc(T, ...ARGS) =({
    require!(T!.isClass, "Type '{t}' must be a class type", #T!)
    var obj = mk_bc!(bfiAlloca!, #&T!, T!);
    init_defaults!(obj)
    obj.op__init(ARGS!);
    obj
})

pub var stdout: OutputStream = FileOutputStream(1);
pub var stderr: OutputStream = FileOutputStream(2);

@inline
pub func print[T](data: &const T) {
    require!(T.isString, "type '{t}' is not a string, `print` only supports string types", #T)
    #if (T.isClass) {
        write(0, data.data(), data.size())
    }
    else {
        write(0, data, strlen(data))
    }
}

pub func println(...args: auto) {
    #for (const x: args) {
        stdout << #{x}
    }
    stdout << '\n'
}

@inline
pub func min[T](a: T, b: T) => a < b? a : b

@inline
pub func max[T](a: T, b: T) => a > b? a : b

pub struct Equals[K] {
    func `()`(lhs: &const K, rhs: &const K): bool => lhs == rhs
}

pub struct Hash[K] {
    // @inline
    func `()`(val: &const K) => hash(val)
}

pub struct EqualsCase {
    @inline
    const func `()`(lhs: &const String, rhs: &const String) =>
        strncasecmp(
            lhs.str(),
            rhs.str(),
            min(lhs.size(), rhs.size())) == 0

    @inline
    const func `()`(lhs: const string, rhs: const string) =>
        strcasecmp(lhs, rhs) == 0

    @inline
    const func `()`(lhs: &const __string, rhs: &const __string) =>
        strncasecmp(
            lhs.str(),
            rhs.str(),
            min(lhs.size(), rhs.size())) == 0
}

pub struct HashCase {
    @inline
    const func `()`(value: &const const String) =>
        hash_fnv1a_string_n_igc(#{FNV_32_PRIME}, value.data(), value.size())

    @inline
    const func `()`(value: &const __string) =>
        hash_fnv1a_string_n_igc(
            #{FNV_32_PRIME},
            value.data(),
            value.size()
        )

    @inline
    const func `()`(value: const string) =>
        hash_fnv1a_string_igc(#{FNV_32_PRIME}, value)
}

@[inline]
pub func update[Lhs, Rhs](@unused lhs: &Lhs, @unused rhs: Rhs) {
    require!(Lhs.isClass || Lhs.isStruct, "lhs must be a class/struct type")
    require!(Rhs.isStruct, "rhs must be a struct type")
    #for (const M: Rhs.members) {
        #if (M.isField) {
            #const T = M.Tinfo;
            require!(M.isField, "member {s} must be a field", M.name)
            require!(has_member!(#Lhs, M.name, #T),
                     "target does not have a member named '{s}' of type {t}", M.name, #T)
            lhs.#{mk_ident!(M.name)} = rhs.#{mk_ident!(M.name)}
        }
    }
}

struct CallTrace {
    mod: string
    cls: string
    fun: string
    path: string
    line: u64

    const func `str`(os: &OutputStream) {
        if (mod)
            os << mod << "::"
        if (cls)
            os << cls << "::"
        if (fun)
            os << fun
        os << " ("
        if (path)
            os << path
        else
            os << "<builtin>"
        os << ":" << line << ")"
    }
}

struct StackTrace {
    - calls: ^CallTrace = null;
    - size = 0:u64;
    - capacity = 0:u64;

    - func grow() {
        if (size >= capacity) {
            if (capacity == 0)
                capacity = 8
            else
                capacity <<= 1
            calls = realloc( calls !: ^void, capacity ) !: ^CallTrace
        }
    }

    func `init`() {
        grow()
    }

    func push(mod: string, cls: string, fun: string, path: string, line: u64) {
        grow()
        calls.[size] = CallTrace{mod: mod, cls: cls, fun: fun, path: path, line: line }
        size++
    }

    const func `str`(os: &OutputStream) {
        for (const i: 0..size) {
            os << "\n " << calls.[i]
        }
    }

    func `deinit`() {
        if (calls != null) {
            free(calls !: ^void)
            calls = null
            capacity = 0
            size = 0
        }
    }
}

pub class Exception {
    name: string
    stackTrace: StackTrace

    func `init`(name: string) {
        this.name = name
        stackTrace = StackTrace();
    }

    virtual func what(): string

    @inline
    func push(mod: string, cls: string, fun: string, path: string, line: u64) {
        stackTrace.push(mod, cls, fun, path, line)
    }

    const func `str`(os: &OutputStream) {
        os << name << "(\"" << what() << "\") at:" << stackTrace << "\n"
    }
}

pub struct Void{}

@[pure, inline]
pub func panicUnhandledException(ex: &Exception) {
    stderr << ex << "\n"
    abort()
}

#if (defined __CXY_TEST__) {
// Add macro for testing
macro ok(cond) {
    if (!(cond!))
        return (file!, offset!, line!)
}

#if (!defined TESTS_RUNNER) {
    func runTests(args: Slice[string],
                  testFile: string,
                  tests: Slice[( string, func() -> __Optional[(string, u64, u64)] )] ) {
        var failed = 0;
        if (len!(tests) == 0) {
            stdout << "0 tests defined in " << testFile << "\n";
            return 0
        }

        stdout << "Running " << testFile << " tests...\n"
        for (const testCase, _ : tests) {
            const name, exec = testCase;
            stdout << "  Running test case " << name << ""

            const r = exec();
            stdout << "\r                                                               ";
            if (r) {
                const res = *r;
                stdout << "\r  \x1B[1;31m\xE2\x9C\x92 \x1B[1;37m" << name
                       << " - " << res.0 << ":" << res.1 << "\x1B[0m\n"
                failed++
            }
            else {
                stdout << "\r  \x1B[1;32m\xE2\x9C\x93 \x1B[1;37m" << name << "\x1B[0m\n"
            }
        }

        if (failed != 0) {
            stdout << "\x1B[1;31m\xE2\x9C\x92 FAILED " << failed << "/" << len!(tests) << " tests failed!\x1B[0m\n"
            return -1
        }
        return 0
    }
}

}