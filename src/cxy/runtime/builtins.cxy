
pub extern func strlen(s: string) : u64
pub extern func sprintf(s: &char, fmt: string, ...args: auto) : i64;
pub extern func strcmp(s1: const string, s2: const string): i32
pub extern func strcasecmp(s1: const string, s2: const string): i32
pub extern func strncasecmp(s1: const string, s2: const string, len: u64): i32
pub extern func memmove(dst: &void, src: &const void, num: u64) : &void;
pub extern func memset(ptr: &void, value: i32, num: u64) : &void;
pub extern func memcpy(dst: &void, src: &const void, n: u64): &void
pub extern func malloc(s: u64): &void
pub extern func realloc(ptr: &void, s: u64): &void
pub extern func free(ptr: &void): void
pub extern func abort(): void;
pub extern func printf(s: string, ...args: auto): i32
pub extern func write(fd: i32, buf: &const void, len: u64) : i64
pub extern func strtoll(str: &const char, endptr: & &const char, base: i32): i64;
pub extern func strtod(str: &const char, endptr: & &const char): f64;
pub extern func toupper(c: i32): i32
pub extern func __error(): &i32

func __cxy_assert_abort(file: string, line: u64, column: u64) {
    var buf: [char, 64];
    write(2, "assertion failed: ", 18)
    write(2, file, strlen(file))
    var len = sprintf(buf, ":%u:%u\n", line, column);
    write(2, buf, len)
    abort()
}

@[pure, inline]
pub func __cxy_assert(cond: bool, file: string, line: u64, column: u64) {
    if (!cond) {
        __cxy_assert_abort(file, line, column)
    }
}

#if (!defined DISABLE_ASSERT) {
    macro assert(cond) __cxy_assert(cond!, file!, line!, column!)
}
else {
    macro assert(cond) ()
}

macro errno() =(*__error())

@[pure]
pub func __cxy_panic(file: string, line: u64, column: u64, msg: string) {
    var buf: [char, 64];
    write(2, "panic: ", 7)
    write(2, msg, strlen(msg))
    write(2, "\n  @", 4)
    write(2, file, strlen(file))
    var len = sprintf(buf, ":%u:%u\n", line, column);
    write(2, buf, len)
    abort()
}

macro panic(msg) __cxy_panic(file!, line!, column!, msg!)

@inline
pub func __bswap_16(x: u16) => <u16>(((x >> 8) & 0xff) | ((x & 0xff) << 8))

@inline
pub func __bswap_32(x: u32) => (
      ((x & 0xff000000:u32) >> 24)
    | ((x & 0x00ff0000:u32) >> 8)
    | ((x & 0x0000ff00:u32) << 8)
    | ((x & 0x000000ff:u32) << 24)
)

@inline
pub func __bswap_64(x: u64) => (
      ((x & 0xff00000000000000:u64) >> 56)
    | ((x & 0x00ff000000000000:u64) >> 40)
    | ((x & 0x0000ff0000000000:u64) >> 24)
    | ((x & 0x000000ff00000000:u64) >> 8)
    | ((x & 0x00000000ff000000:u64) << 8)
    | ((x & 0x0000000000ff0000:u64) << 24)
    | ((x & 0x000000000000ff00:u64) << 40)
    | ((x & 0x00000000000000ff:u64) << 56)
)

type sptr = &void

struct __mem {
    refs: u32
    magic: i32
    dctor: func(ptr: sptr) -> void
}

#const MEMORY_MAGIC = <i32>0xAEAEAEAE

@[pure, linkage("External")]
func __smart_ptr_alloc(size: u64, dctor: func(ptr: sptr) -> void = null) {
    var ptr = malloc(size + sizeof!(__mem));
    if (ptr == null) {
        return ptr !: sptr
    }

    var mem = ptr !: &__mem;
    mem.magic = #{MEMORY_MAGIC}
    mem.refs = 1
    mem.dctor = dctor
    return ((ptr !: &u8) + sizeof!(__mem)) !: sptr
}

@[pure, inline, linkage("External")]
func __smart_ptr_get(ptr: sptr) {
    printf("reg get %p\n", ptr)
    if (ptr == null) {
        panic!("reference to a null pointer")
    }

    var mem = ((ptr !: &u8) + (-sizeof!(__mem))) !: &__mem;
    if (mem.magic != #{MEMORY_MAGIC}) {
        panic!("invalid pointer")
    }
    mem.refs++
    return ptr
}

@[pure, linkage("External")]
func __smart_ptr_drop(ptr: sptr) {
    if (ptr == null)
        return;

    var mem = ((ptr !: &u8) + (-sizeof!(__mem))) !: &__mem;
    if (mem.magic != #{MEMORY_MAGIC}) {
        panic!("invalid smart pointer")
    }

    mem.refs--
    if (mem.refs == 0) {
        // invoke destructor if available
        if (mem.dctor != null) {
            mem.dctor(ptr)
        }

        mem.magic = 0
        free(mem !: &void)
    }
}

@[pure, inline]
pub func __calloc(size: u64) => memset(malloc(size), 0, size)

/* Builtin Optional Type */
struct __Optional[T] {
    /* @note: Do not change the order of these members */
    ok: bool = false;
    val: T

    @inline func `init`() { ok = false }
    @inline func `init`(value: T) { val = value; ok = true }

    @inline func `!!`() => ok
    @inline func `deref`() { return val }
    @inline const func `!!`() => ok
    @inline const func `deref`() { return val }
}

/* Creates a valid optional value */
@inline
pub func Some[T](@transient value: T) => __Optional[T]{ok: true, val: value}

/* Creates an invalid optional value */
@inline
pub func None[T]() => __construct1[__Optional[T]]()

pub type HashCode = u32
#const FNV_32_PRIME = 0x01000193

@inline
pub func hash_fnv1a_uint8(h: HashCode, x: u8) : HashCode
{
    return (h ^ x) * #{FNV_32_PRIME}
}

pub func hash_fnv1a_uint16(h: HashCode, x: u16) =>
    hash_fnv1a_uint8(hash_fnv1a_uint8(h, <u8>(x & 0xff)), <u8>(x >> 8))

pub func hash_fnv1a_uint32(h: HashCode, x: u32) =>
    hash_fnv1a_uint16(hash_fnv1a_uint16(h, <u16>(x & 0xffff)), <u16>(x >> 16))

pub func hash_fnv1a_uint64(h: HashCode, x: u64) =>
    hash_fnv1a_uint32(hash_fnv1a_uint32(h, <u32>(x & 0xffffffff)), <u32>(x >> 32))

pub func hash_fnv1a_ptr(h: HashCode, ptr: &const void) =>
    hash_fnv1a_uint64(h, ptr !: u64)

pub func hash_fnv1a_string(h: HashCode, str: string)
{
    var i = 0;
    while (str.[i] != '\0') {
        h = hash_fnv1a_uint8(h, <u8>str.[i]);
        i++
    }
    return h;
}

pub func hash_fnv1a_string_n_igc(h: HashCode, str: &const char, len: u64)
{
    var i = 0;
    while (i < len) {
        var c = toupper(<i32>str.[i]);
        h = hash_fnv1a_uint8(h, <u8>c);
        i++
    }
    return h;
}

pub func hash_fnv1a_string_igc(h: HashCode, str: const string)
{
    var i = 0;
    while (str.[i] != '\0') {
        var c = toupper(<i32>str.[i]);
        h = hash_fnv1a_uint8(h, <u8>c);
        i++
    }
    return h;
}

@[pure]
pub func hash_fnv1a_bytes(h: HashCode,
                         ptr: &const void,
                         size: u64)
{
    const p = ptr !: &const u8;
    for (const i: 0..size-1)
        h = hash_fnv1a_uint8(h, p.[i]);
    return h
}

@[pure]
pub func hash[T](val: const T, init: HashCode = #{FNV_32_PRIME}) : HashCode {
    #if (#T == #string) {
        return hash_fnv1a_string(init, val)
    }
    else #if (#T == #i8 || #T == #u8) {
        return hash_fnv1a_uint8(init, <u8>val)
    }
    else #if (#T == #i16 || #T == #u16) {
        return hash_fnv1a_uint16(init, <u16>val)
    }
    else #if (#T == #i32 || #T == #u32) {
        return hash_fnv1a_uint32(init, <u32>val)
    }
    else #if (T.isFloat || #T == #i64 || #T == #u64) {
        return hash_fnv1a_uint64(init, <u64>val)
    }
    else #if (T.isEnum) {
        return hash_fnv1a_uint64(init, <u64>val)
    }
    else #if (T.isTuple) {
        var code = #{FNV_32_PRIME};
        #for (const i: 0..T.membersCount) {
            code = hash(val.#{i}, code)
        }
        return code
    }
    else #if (T.isArray || T.isSlice) {
        var code = #{FNV_32_PRIME};
        for (const x: val) {
            code = hash(x, code)
        }
        return code
    }
    else #if (T.isUnion) {
        var code = #{FNV_32_PRIME};
        match (val) {
            #for (const i: 0..#{T.membersCount}) {
                case #{typeat!(T, i)} as y => {
                    code = hash(#{i}, code)
                    code = hash(y, code)
                }
            }
        }
        return code;
    }
    else {
        // this will fail if T does not implement hash function
        return val.op__hash()
    }
}

pub struct CString {
    s: string = null;
    _size: u64 = 0;
    @inline func `init`(s: string) {
        this.s = s
        _size = strlen(s)
    }

   func `init`(s: string, size: u64) {
        this.s = s
        _size = size
    }

    @inline const func compare(other: This) => strcmp(this.s, other.s)
    @inline const func `==`(other: This) => compare(other) == 0
    @inline const func `!=`(other: This) => compare(other) != 0
    @inline const func `<`(other: This) => compare(other) < 0
    @inline const func `<=`(other: This) => compare(other) <= 0
    @inline const func `>`(other: This) => compare(other) > 0
    @inline const func `>=`(other: This) => compare(other) >= 0
    @inline const func `hash`() => hash_fnv1a_string(#{FNV_32_PRIME}, this.s)
    @inline const func size() => _size
    @inline const func data() => s

    func toi[T](base: i32 = 0) {
        require!(T.isInteger, "type '{t}' unsupported by `CString.toi`", #T)
        var ep: &const char;
        return <T>strtoll(s !: &const char, &ep, base);
    }

    func tof[T]() {
        require!(T.isFloat, "type '{t}' unsupported by `CString.tof`", #T)
        var ep: &const char;
        return <T>strtod(s !: &const char, &ep);
    }
}

#const CXY_STRING_BUILDER_DEFAULT_CAPACITY = 32:u64

pub class OutputStream {
    @[pure]
    virtual func append(str: &const char, size: u64): void

    @inline
    func appendString(s: string) : void {
        append(s !: &const char, strlen(s))
    }

    @inline
    func appendString(s: CString) : void {
        append(s.s !: &const char, s.size())
    }

    func appendSignedInt(num: i64) {
        var buf: [char, 64];
        const len = sprintf(buf, "%lld", num);
        append(buf, len)
    }

    func appendUnSignedInt(num: u64) {
        var buf: [char, 32];
        const len = sprintf(buf, "%llu", num);
        append(buf, len)
    }

    func appendFloat(num: f64) {
        var data: [char, 32];
        const len = sprintf(data, "%g", num);
        append(data, len)
    }

    func appendChar(ch: wchar) {
        var data: [char, 5];
        var size: u64 = 0;
        if (ch < 0x80) {
            data.[0] = <char> ch
            size = 1
        }
        else if (ch < 0x800) {
            data.[0] = <char> (0xC0 | (ch >> 6))
            data.[1] = <char> (0x80 | (ch & 0x3f))
            size = 2;
        }
        else if (ch < 0x10000) {
            data.[0] = <char> (0xE0 | (ch >> 12))
            data.[1] = <char> (0x80 | ((ch >> 6) & 0x3f))
            data.[2] = <char> (0x80 | (ch & 0x3f))
            size = 3
        }
        else if (ch < 0x200000) {
            data.[0] = <char> (0xF0 | (ch >> 16))
            data.[1] = <char> (0x80 | ((ch >> 12) & 0x3f))
            data.[2] = <char> (0x80 | ((ch >> 6) & 0x3f))
            data.[3] = <char> (0x80 | (ch & 0x3f))
            size = 4
        }
        else {
            // TODO raise OutOfRangeException()
        }
        append(data, size)
    }


    @inline
    func appendBool(val: bool) {
        if (val)
            append("true" !: &const char, 4:u64)
        else
            append("false" !: &const char, 5:u64)
    }

    func appendPointer[T](ptr: &const T) {
        var data: [char, 32];
        const len = sprintf(data, "%p", ptr !: &const void);
        append(data, len)
    }

    func `<<`[U](val: const U) : OutputStream {
        #if (U.isString)
            #if (U.isClass)
                append(val._data !: &const char, val.size())
            else
                appendString(__construct1[CString](val))
        else #if (U.isInteger)
            appendSignedInt(<i64>val)
        else #if (U.isFloat)
            appendFloat(val)
        else #if (U.isBoolean)
            appendBool(val)
        else #if (#U == #wchar || #U == #char)
             appendChar(val)
         else #if(#U == CString)
            appendString(val.s)
        else #if (U.isEnum) {
             appendString(#{U.name})
             appendChar('.')
             switch(val) {
                #for (const V: (#U).members) {
                    case U.#{mk_ident!(V.name)} =>
                        appendString(#{V.name})
                }
            }
        }
        else #if (U.isOptional) {
            if (val)
                this << *val
            else
                appendString("null")
        }
        else #if (U.isStruct || U.isClass)
            val.op__str(this)
        else #if (U.isTuple) {
            this.appendChar('(')
            #for (const i: 0..U.membersCount) {
                #if (i != 0)
                    this.appendString(", ")
                this << val.#{i}
            }
            this.appendChar(')')
        }
        else #if (U.isArray || U.isSlice) {
            this.appendChar('[')
            for (const i: 0..len!(val)) {
                if (i != 0)
                    this.appendString(", ")
                this << val.[i]
            }
            this.appendChar(']')
        }
        else #if (U.isUnion) {
            match (val) {
                #for (const i: 0..#{U.membersCount}) {
                    case #{typeat!(U, i)} as y => this << y
                }
            }
        }
        else #if (U.isPointer) {
            this.appendPointer[#{U.pointedType}](val)
        }
        else {
            error!("type {t} not supported by String::`<<` operator", #U)
        }
        return this
    }
}

pub class String : OutputStream {
    - _capacity: u64 = 0;
    - _size: u64 = 0;
    - _data: &char = null;

    - func grow(growSize: u64) {
        const newSize = _size + growSize;
        if (this._data == null) {
            this._data = <&char> malloc(growSize + 1)
            this._capacity = growSize
        }
        else if (this._capacity < newSize) {
            while (this._capacity < newSize) {
                this._capacity <<= 1
            }
            this._data = <&char> realloc(this._data !: &void, this._capacity+1)
        }
    }

    @inline
    func `init`() {}

    @inline
    func `init`(str: string) {
        super.appendString(str)
    }

    @inline
    func `init`(str: &const char, len: u64) {
        append(str, len)
    }

    @inline
    func `deinit`() => {
        if (_data != null) {
            free(this._data)
            this._data = null
        }
    }

    func append(str: &const char, size: u64) : void {
        if (size) {
            grow(size)
            var p = this._data + this._size;
            memmove(p, str, size)
            this._size += size
            this._data.[this._size] = <char>'\0'
        }
    }

    @inline
    func `+`[U](other: const U) => this << other

    @inline
    func `str`(sb: OutputStream) {
        printf("This is another thing\n");
        sb.append(_data, _size)
    }

    @inline
    const func `hash`() {
        if (this._data) {
            return hash_fnv1a_bytes(#{FNV_32_PRIME}, this._data, this._size)
        }
        else {
            return #{FNV_32_PRIME}
        }
    }

    const func compare(other: &const char, size: u64) {
        if (_size != size)
            return <i32>(_size - size)

        for (const i : 0.._size) {
            if (_data.[i] != other.[i])
                return (<i32>_data.[i]) - (<i32>other.[i])
        }

        return <i32>0
    }

    @inline
    const func compare(other: const String) =>
        compare(other._data, other._size)

    @inline
    const func compare(other: const string) =>
        compare(other !: &const char, strlen(other))

    @inline
    const func `==`(other: const String) => compare(other) == 0

    @inline
    const func `!=`(other: const String) => compare(other) != 0

    @inline
    const func `<`(other: const String) => compare(other) < 0

    @inline
    const func `>`(other: const String) => compare(other) > 0

    @inline
    const func `<=`(other: const String) => compare(other) <= 0

    @inline
    const func `>=`(other: const String) => compare(other) >= 0

    @inline
    const func `==`(other: const string) => compare(other) == 0

    @inline
    const func `!=`(other: const string) => compare(other) != 0

    @inline
    const func `<`(other: const string) => compare(other) < 0

    @inline
    const func `>`(other: const string) => compare(other) > 0

    @inline
    const func `<=`(other: const string) => compare(other) <= 0

    @inline
    const func `>=`(other: const string) => compare(other) >= 0

    @inline
    const func `[]`(idx: u32) {
        assert!(idx < _size)
        return this._data.[idx]
    }

    const func `..`() {
        var i:i32 = 0;
        return () : __Optional[(char, i32)] => {
            if (i < _size)
                return Some((_data.[i], i++))
            else
                return None[(char, i32)]()
        }
    }

    @inline const func size() => _size
    @inline const func capacity() => _capacity
    @inline const func data() => _data
}

pub class FileOutputStream : OutputStream {
    - fd: i32
    func `init`(fd: i32 = 0) {
        this.fd = fd
    }

    func append(str: &const char, size: u64) {
        if (size) {
           write(fd, str, size)
        }
    }
}

pub struct Slice[T] {
    - data: &T
    - len: u64

    func `init`(data: &T, len: u64) {
        this.data = data
        this.len = len
    }

    @inline
    func `[]=`(index:  i64, data: T) {
        assert!(index < len)
        this.data.[index] = data
    }

    @inline
    func `[]`(index:  i64) {
        assert!(index < len)
        return this.data.[index]
    }

    @inline
    const func `[]`(index:  i64) {
        assert!(index < len)
        return this.data.[index]
    }

    const func `..`() {
        var i: i32 = 0;
        return () : __Optional[(T, i32)] => {
            if (i < len)
                return Some((data.[i], i++))
            return None[(T, i32)]()
        }
    }

    const func `hash`() {
        var code: u32 = #{FNV_32_PRIME};
        for (const i: 0..len) {
            code = hash(data.[i], code)
        }
        return code
    }

    const func `str`(sb: OutputStream) {
        sb.appendChar('[')
        for (const i: 0..len) {
            if (i != 0)
                sb.appendString(", ")
            sb << data.[i]
        }
        sb.appendChar(']')
    }
}

@[pure, inline]
pub func ref[T](ptr: T) {
    __smart_ptr_get(ptr !: sptr)
    return ptr
}

@[pure]
pub func __deinit[T](t: T) {
    #if (T.isStruct) {
        #for (const member: T.members) {
            #if (member.isField) {
                #const M = member.Tinfo;
                #if (M.isClass)
                    t.#{mk_ident!(member.name)} = null
                else #if (M.isStruct || M.isTuple)
                    __deinit[M](t.#{mk_ident!(member.name)})
            }
        }
    }
    else #if (T.isTuple) {
        #const i = 0;
        #for (const member: 0..T.membersCount) {
            #const M = typeat!(T, member);
            #if (M.isClass)
                t.#{member} = null
            else #if (M.isStruct || M.isTuple)
                __deinit(t.#{member})
        }
    }
    else {
        warn!("builtin de-initializer is not supported type `{t}`", #T)
    }
}

/**
 * Used internally by the compiler to copy structs and tuples, this
 * makes sure that reference types are gracefully handled.
 */
@[pure, linkage("External")]
pub func __copy[T](t: T) {
    #if (T.hasReferenceMembers) {
        #if (T.isStruct) {
            #const nodes = mk_ast_list!();
            #for (const member: T.members) {
                #if (member.isField) {
                    #const M = member.Tinfo;
                    #if (M.isClass) {
                        ast_list_add!(
                            nodes,
                            mk_field_expr!(
                                member.name,
                                __smart_ptr_get(t.#{mk_ident!(member.name)} !: &void) !: M
                            )
                        )
                    }
                    else #if (M.isStruct || M.isTuple) {
                        ast_list_add!(
                            nodes,
                            mk_field_expr!(
                                 member.name,
                                __copy(t.#{mk_ident!(member.name)})
                            )
                        )
                    }
                    else {
                        ast_list_add!(
                            nodes,
                            mk_field_expr!(member.name, t.#{mk_ident!(member.name)})
                        )
                    }
                }
            }
            return mk_struct_expr!(#T, #{nodes})
        }
        else #if (T.isTuple) {
            #const nodes = mk_ast_list!();
            #for (const member: 0 .. T.membersCount) {
                #const M = typeat!(T, member);
                #if (M.isClass) {
                    ast_list_add!(
                        #{nodes},
                        __smart_ptr_get(t.#{mk_integer!(member)} !: &void) !: M
                    )
                }
                else #if (M.isStruct || M.isTuple) {
                    ast_list_add!(
                        #{nodes},
                        __copy(t.#{mk_integer!(member)})
                    )
                }
                else {
                    ast_list_add!(
                        #{nodes},
                        t.#{mk_integer!(member)}
                    )
                }
            }

            return mk_tuple_expr!(#{nodes})
        }
        else
            error!("copy operation not supported on `{t}`", #T)
    }
    else {
        return &&t
    }
}

@[pure, linkage("External")]
func __deinit_fwd[T](ptr: sptr) {
    @transient var obj;
    #if (T.isClass)
         obj = (ptr !: T);
    else
         obj = (ptr !: &T);

    #if (T.has_deinit) {
        obj.op__deinit()
    }
    else {
        #for (const member: T.members) {
            #if (member.isField) {
                #const M = member.Tinfo;
                #if (M.isClass)
                    obj.#{mk_ident!(member.name)} = null
                else #if (M.isStruct || M.isTuple)
                    __deinit[M](obj.#{mk_ident!(member.name)})
            }
        }
    }
}

pub func allocate[T](len: u32 = 0) {
    #if (T.isClass) {
        var obj = (__smart_ptr_alloc(sizeof!(#T), __deinit_fwd[T]) !: T);
        // this will ensure that default values are assigned
        init_defaults!(obj)
        return obj
    }
    else {
        var obj: &T = null;
        #if (T.hasReferenceMembers) {
            obj = <&T> __smart_ptr_alloc(sizeof!(#T), __deinit_fwd[T])
        }
        else {
            obj = <&T> __smart_ptr_alloc(sizeof!(#T))
        }

        #if (T.isStruct)
            // this will ensure that default values are assigned
            init_defaults!(obj)

        return obj
    }
}

pub func __construct0[T](@transient ...args: auto) {
    require!(T.isClass, "type '{t}' unsupported by `make`", #T)

    var obj = (__smart_ptr_alloc(sizeof!(#T), __deinit_fwd[T]) !: T);
    // this will ensure that default values are assigned
    init_defaults!(obj)
    obj.op__init(...args)
    return obj
}

@[inline, pure]
pub func __construct1[T](@transient ...args: auto) {
    require!(T.isStruct, "type '{t}' unsupported by `create`, only structs can be created", #T)

    var obj: T;
    // this will ensure that default values are assigned
    init_defaults!(obj)
    obj.op__init(...args)
    return obj
}

@[inline, pure]
pub func __destructor[T](ptr: T) {
    require!(T.isClass, "expecting type of deallocated object to be a class")
    __smart_ptr_drop(ptr !: sptr)
}

pub var stdout: OutputStream = __construct0[FileOutputStream](1);
pub var stderr: OutputStream = __construct0[FileOutputStream](2);

@inline
pub func print[T](data: const T) {
    require!(T.isString, "type '{t}' is not a string, `print` only support string types", #T)
    #if (T.isClass) {
        write(0, data.data(), data.size())
    }
    else {
        write(0, data, strlen(data))
    }
}

pub func println(...args: auto) {
    #for (const x: args) {
        stdout << #{x}
    }
    stdout << '\n'
}

macro alloca(T) mk_bc!(bfiAlloca!, #&void, T!)

@inline
pub func min[T](a: T, b: T) => a < b? a : b

@inline
pub func max[T](a: T, b: T) => a < b? a : b

pub struct Equals[K] {
    @inline
    func `()`(lhs: K, rhs: K): bool => lhs == rhs
}

pub struct Hash[K] {
    @inline
    func `()`(val: K) => hash(val)
}

pub struct EqualsCase {
    @inline
    const func `()`(lhs: const String, rhs: const String) =>
        strncasecmp(
            lhs.data() !: string,
            rhs.data() !: string,
            min(lhs.size(), rhs.size())) == 0

    @inline
    const func `()`(lhs: const string, rhs: const string) =>
        strcasecmp(lhs, rhs) == 0

    @inline
    const func `()`(lhs: CString, rhs: CString) =>
        strncasecmp(
            lhs.data() !: string,
            rhs.data() !: string,
            min(lhs.size(), rhs.size())) == 0
}

pub struct HashCase {
    @inline
    const func `()`(value: const String) =>
        hash_fnv1a_string_n_igc(#{FNV_32_PRIME}, value.data(), value.size())

    @inline
    const func `()`(value: const CString) =>
        hash_fnv1a_string_n_igc(
            #{FNV_32_PRIME},
            value.data() !: &const char,
            value.size()
        )

    @inline
    const func `()`(value: const string) =>
        hash_fnv1a_string_igc(#{FNV_32_PRIME}, value)
}

