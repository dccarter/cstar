pub extern func strlen(s: string) : u64
pub extern func sprintf(s: &char, fmt: string, ...args: auto) : i64;
pub extern func strcmp(s1: const string, s2: const string): i32
pub extern func memmove(dst: &void, src: &const void, num: u64) : &void;
pub extern func memset(ptr: &void, value: i32, num: u64) : &void;
pub extern func malloc(s: u64): &void
pub extern func realloc(ptr: &void, s: u64): &void
pub extern func free(ptr: &void): void
pub extern func abort(): void;

pub extern func write(fd: i32, buf: &const void, len: u64) : i64

@[pure, inline]
pub func __cxy_alloc(size: u64) => malloc(size)
@[pure, inline]
pub func __cxy_realloc(ptr: &void, size: u64) => realloc(ptr, size)
@[pure, inline]
pub func __cxy_calloc(size: u64) => memset(__cxy_alloc(size), 0, size)
@[pure, inline]
pub func __cxy_free(ptr: &void) { free(ptr) }


@[pure, inline]
pub func __cxy_assert(cond: bool, file: string, line: u64, column: u64) {
    if (!cond) {
        var buf: [char, 64];
        write(2, "assertion failed: ", 18)
        write(2, file, strlen(file))
        var len = sprintf(buf, ":%u:%u\n", line, column);
        write(2, buf, len)
        abort()
    }
}

#if (!defined DISABLE_ASSERT) {
    macro assert(cond) __cxy_assert(cond!, file!, line!, column!)
}
else {
    macro assert(cond) ()
}

/* Builtin Optional Type */
struct __Optional[T] {
    /* @note: Do not change the order of these members */
    - ok: bool = false;
    - val: T

    @inline func `init`() { ok = false }
    @inline func `init`(value: T) { val = value; ok = true }

    @inline func `!!`() => ok
    @inline func `deref`() { return val }
    @inline const func `!!`() => ok
    @inline const func `deref`() { return val }
}

/* Creates a valid optional value */
@inline
pub func Some[T](@transient value: T) => __Optional[T](value)

/* Creates an invalid optional value */
@inline
pub func None[T]() => __Optional[T]()

pub type Hash = u32
#const FNV_32_PRIME = 0x01000193

@inline
pub func hash_fnv1a_uint8(h: Hash, x: u8) : Hash
{
    return (h ^ x) * #{FNV_32_PRIME}
}

pub func hash_fnv1a_uint16(h: Hash, x: u16) =>
    hash_fnv1a_uint8(hash_fnv1a_uint8(h, <u8>(x & 0xff)), <u8>(x >> 8))

pub func hash_fnv1a_uint32(h: Hash, x: u32) =>
    hash_fnv1a_uint16(hash_fnv1a_uint16(h, <u16>(x & 0xffff)), <u16>(x >> 16))

pub func hash_fnv1a_uint64(h: Hash, x: u64) =>
    hash_fnv1a_uint32(hash_fnv1a_uint32(h, <u32>(x & 0xffffffff)), <u32>(x >> 32))

pub func hash_fnv1a_ptr(h: Hash, ptr: &const void) =>
    hash_fnv1a_uint64(h, ptr !: u64)

pub func hash_fnv1a_string(h: Hash, str: string)
{
    var i = 0;
    while (str.[i] != '\0') {
        h = hash_fnv1a_uint8(h, <u8>str.[i]);
        i++
    }
    return h;
}

pub func hash_fnv1a_bytes(h: Hash,
                         ptr: &const void,
                         size: u64)
{
    const p = ptr: &const u8;
    for (const i: 0..size-1)
        h = hash_fnv1a_uint8(h, p.[i]);
    return h
}

pub func hash[T](val: const T, init: Hash = #{FNV_32_PRIME}) : Hash {
    #if (#T == #string) {
        return hash_fnv1a_string(init, val)
    }
    else #if (#T == #i8 || #T == #u8) {
        return hash_fnv1a_uint8(init, <u8>val)
    }
    else #if (#T == #i16 || #T == #u16) {
        return hash_fnv1a_uint16(init, <u16>val)
    }
    else #if (#T == #i32 || #T == #u32) {
        return hash_fnv1a_uint32(init, <u32>val)
    }
    else #if (T.isFloat || #T == #i64 || #T == #u64) {
        return hash_fnv1a_uint64(init, <u64>val)
    }
    else #if (T.isEnum) {
        return hash_fnv1a_uint64(init, <u64>val)
    }
    else #if (T.isTuple) {
        var code = #{FNV_32_PRIME};
        #for (const i: 0..T.membersCount) {
            code = hash(val.#{i}, code)
        }
        return code
    }
    else #if (T.isArray || T.isSlice) {
        var code = #{FNV_32_PRIME};
        for (const x: val) {
            code = hash(x, code)
        }
        return code
    }
    else #if (T.isUnion) {
        var code = #{FNV_32_PRIME};
        match (val) {
            #for (const i: 0..#{T.membersCount}) {
                case #{typeat!(T, i)} as y => {
                    code = hash(#{i}, code)
                    code = hash(y, code)
                }
            }
        }
        return code;
    }
    else {
        // this will fail if T does not implement hash function
        return val.op__hash()
    }
}

struct CString {
    s: string = null

    @inline func `init`(s: string) { this.s = s }
    @inline const func compare(other: This) => strcmp(this.s, other.s)
    @inline const func `==`(other: This) => compare(other) == 0
    @inline const func `!=`(other: This) => compare(other) != 0
    @inline const func `<`(other: This) => compare(other) < 0
    @inline const func `<=`(other: This) => compare(other) <= 0
    @inline const func `>`(other: This) => compare(other) > 0
    @inline const func `>=`(other: This) => compare(other) >= 0
    @inline const func `hash`() => hash_fnv1a_string(#{FNV_32_PRIME}, this.s)
    @inline const func size() => strlen(s)
}

#const CXY_STRING_BUILDER_DEFAULT_CAPACITY = 32:u64

class String {
    - _capacity: u64 = 0;
    - _size: u64 = 0;
    - _data: &char = null;

    - func grow(growSize: u64) {
        const newSize = _size + growSize;
        if (this._data == null) {
            this._data = <&char> __cxy_alloc(growSize + 1)
            this._capacity = growSize
        }
        else if (this._capacity < newSize) {
            while (this._capacity < newSize) {
                this._capacity <<= 1
            }
            this._data = <&char> __cxy_realloc(this._data !: &void, this._capacity+1)
        }
    }

    @inline
    func `init`() {}

    @inline
    func `init`(str: string) {
        appendString(str)
    }

    @inline
    func `deinit`() => {
        if (_data != null) {
            __cxy_free(this._data)
            this._data = null
        }
    }

    func appendString(str: &const char, size: u64) {
        if (size) {
            grow(size)
            var p = this._data + this._size;
            memmove(p, str, size)
            this._size += size
            this._data.[this._size] = <char>'\0'
        }
    }

    @inline
    func appendString(s: string) : void {
        appendString(s: &const char, strlen(s))
    }

    @inline
    func appendString(s: CString) : void {
        appendString(s.s: &const char, s.size())
    }

    func appendSignedInt(num: i64) {
        var buf: [char, 64];
        const len = sprintf(buf, "%lld", num);
        appendString(buf, len)
    }

    func appendUnSignedInt(num: u64) {
        var buf: [char, 32];
        const len = sprintf(buf, "%llu", num);
        appendString(buf, len)
    }

    func appendFloat(num: f64) {
        var data: [char, 32];
        const len = sprintf(data, "%g", num);
        appendString(data, len)
    }

    func appendChar(ch: wchar) {
        if (ch < 0x80) {
            grow(1);
            this._data.[this._size++] = <char> ch
        }
        else if (ch < 0x800) {
            grow(2);
            this._data.[this._size++] = <char> (0xC0 | (ch >> 6))
            this._data.[this._size++] = <char> (0x80 | (ch & 0x3f))
        }
        else if (ch < 0x10000) {
            grow(3);
            this._data.[this._size++] = <char> (0xE0 | (ch >> 12))
            this._data.[this._size++] = <char> (0x80 | ((ch >> 6) & 0x3f))
            this._data.[this._size++] = <char> (0x80 | (ch & 0x3f))
        }
        else if (ch < 0x200000) {
            grow(4);
            this._data.[this._size++] = <char> (0xF0 | (ch >> 16))
            this._data.[this._size++] = <char> (0x80 | ((ch >> 12) & 0x3f))
            this._data.[this._size++] = <char> (0x80 | ((ch >> 6) & 0x3f))
            this._data.[this._size++] = <char> (0x80 | (ch & 0x3f))
        }
        else {
            // TODO raise OutOfRangeException()
        }
        this._data.[this._size] = <char>'\0'
    }


    @inline
    func appendBool(val: bool) {
        if (val)
            appendString("true": &const char, 4)
        else
            appendString("false": &const char, 5)
    }

    func appendPointer[T](ptr: &const T) {
        var data: [char, 32];
        const len = sprintf(data, "%p", ptr: &const void);
        appendString(data, len)
    }

    @inline
    func `<<`[U](val: const U) : String {
        #if (U.isString)
            #if (U.isClass)
                appendString(val._data:  &const char, val.size())
            else
                appendString(val)
        else #if (U.isInteger)
            appendSignedInt(<i64>val)
        else #if (U.isFloat)
            appendFloat(val)
        else #if (U.isBoolean)
            appendBool(val)
        else #if (#U == #wchar || #U == #char)
             appendChar(val)
         else #if(#U == CString)
            appendString(val.s)
        else #if (U.isEnum) {
             appendString(#{U.name})
             appendChar('.')
             switch(val) {
                #for (const V: (#U).members) {
                    case U.#{mk_ident!(V.name)} =>
                        appendString(#{V.name})
                }
            }
        }
        else #if (U.isOptional) {
            if (val)
                this << *val
            else
                appendString("null")
        }
        else #if (U.isStruct || U.isClass)
            val.op__str(this)
        else #if (U.isTuple) {
            this.appendChar('(')
            #for (const i: 0..U.membersCount) {
                #if (i != 0)
                    this.appendString(", ")
                this << val.#{i}
            }
            this.appendChar(')')
        }
        else #if (U.isArray || U.isSlice) {
            this.appendChar('[')
            for (const i: 0..len!(val)) {
                if (i != 0)
                    this.appendString(", ")
                this << val.[i]
            }
            this.appendChar(']')
        }
        else #if (U.isUnion) {
            match (val) {
                #for (const i: 0..#{U.membersCount}) {
                    case #{typeat!(U, i)} as y => this << y
                }
            }
        }
        else #if (U.isPointer) {
            this.appendPointer[#{U.pointedType}](val)
        }
        else {
            error!("type {t} not supported by String::`<<` operator", #U)
        }
        return this
    }

    @inline
    func `+`[U](other: const U) => this << other

    @inline
    func `str`(sb: String) {
        sb.appendString(_data, _size)
    }

    @inline
    const func `hash`() {
        if (this._data) {
            return hash_fnv1a_bytes(#{FNV_32_PRIME}, this._data, this._size)
        }
        else {
            return #{FNV_32_PRIME}
        }
    }

    const func compare(other: &const char, size: u64) {
        if (_size != size)
            return <i32>(_size - size)

        for (const i : 0.._size) {
            if (_data.[i] != other.[i])
                return (<i32>_data.[i]) - (<i32>other.[i])
        }

        return <i32>0
    }

    @inline
    const func compare(other: const String) =>
        compare(other._data, other._size)

    @inline
    const func compare(other: const string) =>
        compare(other: &const char, strlen(other))

    @inline
    const func `==`(other: const String) => compare(other) == 0

    @inline
    const func `!=`(other: const String) => compare(other) != 0

    @inline
    const func `<`(other: const String) => compare(other) < 0

    @inline
    const func `>`(other: const String) => compare(other) > 0

    @inline
    const func `<=`(other: const String) => compare(other) <= 0

    @inline
    const func `>=`(other: const String) => compare(other) >= 0

    @inline
    const func `==`(other: const string) => compare(other) == 0

    @inline
    const func `!=`(other: const string) => compare(other) != 0

    @inline
    const func `<`(other: const string) => compare(other) < 0

    @inline
    const func `>`(other: const string) => compare(other) > 0

    @inline
    const func `<=`(other: const string) => compare(other) <= 0

    @inline
    const func `>=`(other: const string) => compare(other) >= 0

    @inline
    const func `[]`(idx: u32) {
        assert!(idx < _size)
        return this._data.[idx]
    }

    const func `..`() {
        var i:i32 = 0;
        return () : __Optional[(char, i32)] => {
            if (i < _size)
                return Some((_data.[i], i++))
            else
                return None[(char, i32)]()
        }
    }

    @inline const func size() => _size
    @inline const func capacity() => _capacity
    @inline const func data() => _data
}

pub struct Slice[T] {
    - data: &T
    - len: u64

    func `init`(data: &T, len: u64) {
        this.data = data
        this.len = len
    }

    @inline
    func `[]=`(index:  i64, data: T) {
        assert!(index < len)
        this.data.[index] = data
    }

    @inline
    func `[]`(index:  i64) {
        assert!(index < len)
        return this.data.[index]
    }

    @inline
    const func `[]`(index:  i64) {
        assert!(index < len)
        return this.data.[index]
    }

    const func `..`() {
        var i: i32 = 0;
        return () : __Optional[(T, i32)] => {
            if (i < len)
                return Some((data.[i], i++))
            return None[(T, i32)]()
        }
    }

    const func `hash`() {
        var code: u32 = #{FNV_32_PRIME};
        for (const i: 0..len) {
            code = hash(data.[i], code)
        }
        return code
    }

    const func `str`(sb: String) {
        sb.appendChar('[')
        for (const i: 0..len) {
            if (i != 0)
                sb.appendString(", ")
            sb << data.[i]
        }
        sb.appendChar(']')
    }
}

pub func allocate[T](len: u32 = 0) => {
    var obj = __cxy_alloc(sizeof!(#T)) : T;
    #if (T.isClass || T.isStruct) {
        // this will ensure that default values are assigned
        init_defaults!(obj)
    }
    return obj
}

@inline
pub func deallocate[T](ptr: T) {
    #if (T.has_deinit) {
        ptr.op__deinit()
    }
    __cxy_free(ptr: &void)
}

@inline
pub func print[T](data: const T) {
    #if (T.isString) {
        #if (T.isClass) {
            write(0, data.data(), data.size())
        }
        else {
            write(0, data, strlen(data))
        }
    }
    else {
        error!("'{t}' currently not supported", #T)
    }
}

pub func println(...args: auto) {
    var s = String();
    #for (const x: args) {
        s << #{x}
    }
    write(0, s.data(), s.size())
    write(0, "\n", 1)

    deallocate(s)
}
