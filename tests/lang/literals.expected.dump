pub extern func __init(): void
extern func __smart_ptr_get(ptr: sptr): &void

extern func __smart_ptr_drop(ptr: sptr): void

struct __OptionalI_Tsi32_E {
  ok: bool = false
  val: (string, i32)
}

pub func __OptionalI_Tsi32_E_op__initI_E(this: &__Optional[(string, i32)]) {
  this.ok = false
}

pub func __OptionalI_Tsi32_E_op__initI_Tsi32_E(this: &__Optional[(string, i32)], value: (string, i32)) {
  this.val = value
  this.ok = true
}

pub func __OptionalI_Tsi32_E_op__truthyI_E(this: &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __OptionalI_Tsi32_E_op__derefI_E(this: &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func __OptionalI_Tsi32_E_op__truthyI_E(this: const &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __OptionalI_Tsi32_E_op__derefI_E(this: const &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func SomeI_Tsi32_E(value: (string, i32)): __Optional[(string, i32)] {
  return __OptionalI_Tsi32_E{ok = true, val = value}
}

pub func __construct1I_Z__OptionalI_Tsi32_E_T_E(...args: ()): __Optional[(string, i32)] {
  var obj: __Optional[(string, i32)]
  {
    obj.ok = false
  }
  __OptionalI_Tsi32_E_op__initI_E(&obj)
  return obj
}

pub func NoneI_Tsi32_E(): __Optional[(string, i32)] {
  return __construct1I_Z__OptionalI_Tsi32_E_T_E(())
}

struct __Closure1 {
  - i: i32
  - len: u64
  - data: &string
}

pub func __Closure1_op__call(this: &__Closure1): __OptionalI_Tsi32_E {
  if (this.i < this.len) {
    return SomeI_Tsi32_E((this.data.[this.i], this.i++))
  }
  return NoneI_Tsi32_E()
}

pub extern func hash_fnv1a_string(h: Hash, str: string): u32

pub func hashI_sE(val: string, init: Hash = 16777619): Hash {
  return hash_fnv1a_string(init, val)
}

pub extern func CString_op__init(this: &CString, s: string)

pub func __construct1I_ZCString_TCs_E(...args: (const string)): CString {
  var obj: struct CString
  {
    obj.s = null
  }
  CString_op__init(&obj, args.0)
  return obj
}

pub extern func OutputStream_appendStringI_ZCString_E(this: OutputStream, s: CString): void

pub func OutputStream_op__lshiftI_sE(this: OutputStream, val: string): OutputStream {
  OutputStream_appendStringI_ZCString_E(this, __construct1I_ZCString_TCs_E((val)))
  return this
}

pub struct SliceI_sE {
  - data: &string
  - len: u64
}

pub func SliceI_sE_op__init(this: &Slice[string], data: &string, len: u64) {
  this.data = data
  this.len = len
}

pub extern func __cxy_assert(cond: bool, file: string, line: u64, column: u64)

pub func SliceI_sE_op__idx_assign(this: &Slice[string], index: i64, data: string) {
  __cxy_assert(index < this.len, "__builtins.cxy", 559, 9)
  this.data.[index] = data
}

pub func SliceI_sE_op__idxI_i64E(this: &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 565, 9)
  return this.data.[index]
}

pub func SliceI_sE_op__idxI_i64E(this: const &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 571, 9)
  return this.data.[index]
}

pub func SliceI_sE_op__range(this: const &Slice[string]): __Closure1 {
  var i: i32 = 0
  return __Closure1{i = i, len = this.len, data = this.data}
}

pub func SliceI_sE_op__hash(this: const &Slice[string]): u32 {
  var code: u32 = 16777619
  {
    const i = 0
    while (i != this.len)
    {
      code = hashI_sE(this.data.[i], code)
    }
  }
  return code
}

pub extern func OutputStream_appendChar(this: OutputStream, ch: wchar)

pub extern func OutputStream_appendStringI_sE(this: OutputStream, s: string): void

pub func SliceI_sE_op__str(this: const &Slice[string], sb: OutputStream) {
  OutputStream_appendChar(sb, '[')
  {
    const i = 0
    while (i != this.len)
    {
      if (i != 0) {
        OutputStream_appendStringI_sE(sb, ", ")
      }
      OutputStream_op__lshiftI_sE(sb, this.data.[i])
    }
  }
  OutputStream_appendChar(sb, ']')
}

func main(args: SliceI_sE) { }


const llvm.global_ctors = [(0, __init, null)]
