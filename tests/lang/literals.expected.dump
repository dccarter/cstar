

struct __Optional8 {
  - ok: bool = false
  - val: (string, i32)
}

pub func __Optional8_op__init(this: &__Optional[(string, i32)]) {
  this.ok = false
}

pub func __Optional8_op__init(this: &__Optional[(string, i32)], value: (string, i32)) {
  this.val = value
  this.ok = true
}

pub func __Optional8_op__truthy(this: &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __Optional8_op__deref(this: &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func __Optional8_op__truthy(this: const &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __Optional8_op__deref(this: const &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func Some9(value: (string, i32)): __Optional[(string, i32)] {
  var s10 = __Optional8{ok = false, val = (null, 0)}
  __Optional8_op__init(&s10, value)
  return s10
}

pub func None11(): __Optional[(string, i32)] {
  var s12 = __Optional8{ok = false, val = (null, 0)}
  __Optional8_op__init(&s12)
  return s12
}

struct __Closure13 {
  - i: i32
  - len: u64
  - data: &string
}

pub func __Closure13_op__call(this: &__Closure13): __Optional8 {
  if (this.i < this.len) {
    return Some9((this.data.[this.i], this.i++))
  }
  return None11()
}


pub func hash14(val: string, init: Hash = 16777619): Hash {
  return hash_fnv1a_string(init, val)
}



pub func OutputStream_op__lshift15(this: OutputStream, val: string): OutputStream {
  
  var s16 = CString{s = null}
  CString_op__init(&s16, val)
  OutputStream_appendString(this, s16)
  return this
}

pub struct Slice7 {
  - data: &string
  - len: u64
}

pub func Slice7_op__init(this: &Slice[string], data: &string, len: u64) {
  this.data = data
  this.len = len
}


pub func Slice7_op__idx_assign(this: &Slice[string], index: i64, data: string) {
  __cxy_assert(index < this.len, "__builtins.cxy", 488, 9)
  this.data.[index] = data
}

pub func Slice7_op__idx(this: &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 494, 9)
  return this.data.[index]
}

pub func Slice7_op__idx(this: const &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 500, 9)
  return this.data.[index]
}

pub func Slice7_op__range(this: const &Slice[string]): __Closure13 {
  var i: i32 = 0
  return __Closure13{i = i, len = this.len, data = this.data}
}

pub func Slice7_op__hash(this: const &Slice[string]): u32 {
  var code: u32 = 16777619
  {
    const i = 0
    while (i != this.len)
    {
      code = hash14(this.data.[i], code)
    }
  }
  return code
}



pub func Slice7_op__str(this: const &Slice[string], sb: OutputStream) {
  OutputStream_appendChar(sb, '[')
  {
    const i = 0
    while (i != this.len)
    {
      if (i != 0) {
        OutputStream_appendString(sb, ", ")
      }
      OutputStream_op__lshift15(sb, this.data.[i])
    }
  }
  OutputStream_appendChar(sb, ']')
}

func main(args: Slice7) {
  null
  true
  false
  'a'
  'b'
  '\n'
  '\0'
  'ç•Œ'
  'ðŸ˜Š'
  0
  100
  18446744073709551615
  -1
  -2
  -9223372036854775807
  4
  10
  511
  1
  89
  10
  255
  16777215
  1.100000e+00
  1.000000e+00
  1.000000e+06
  1.900000e-05
  ""
  "Hello World"
  "Hello ä¸–ç•Œ"
}

const llvm.global_ctors = [(0, __init, null)]
