pub extern func __init(): void
extern func __smart_ptr_get(ptr: sptr): &void

extern func __smart_ptr_drop(ptr: sptr): void

struct __Optional8 {
  ok: bool = false
  val: (string, i32)
}

pub func __Optional8_op__init(this: &__Optional[(string, i32)]) {
  this.ok = false
}

pub func __Optional8_op__init(this: &__Optional[(string, i32)], value: (string, i32)) {
  this.val = value
  this.ok = true
}

pub func __Optional8_op__truthy(this: &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __Optional8_op__deref(this: &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func __Optional8_op__truthy(this: const &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __Optional8_op__deref(this: const &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func Some9(value: (string, i32)): __Optional[(string, i32)] {
  return __Optional8{ok = true, val = value}
}

pub func __construct111(...args: ()): __Optional[(string, i32)] {
  var obj: __Optional[(string, i32)]
  {
    obj.ok = false
  }
  __Optional8_op__init(&obj)
  return obj
}

pub func None10(): __Optional[(string, i32)] {
  return __construct111(())
}

struct __Closure12 {
  - i: i32
  - len: u64
  - data: &string
}

pub func __Closure12_op__call(this: &__Closure12): __Optional8 {
  if (this.i < this.len) {
    return Some9((this.data.[this.i], this.i++))
  }
  return None10()
}

pub extern func hash_fnv1a_string(h: Hash, str: string): u32

pub func hash13(val: string, init: Hash = 16777619): Hash {
  return hash_fnv1a_string(init, val)
}

pub extern func CString_op__init(this: &CString, s: string)

pub func __construct115(...args: (const string)): CString {
  var obj: struct CString
  {
    obj.s = null
  }
  CString_op__init(&obj, args.0)
  return obj
}

pub extern func OutputStream_appendString(this: OutputStream, s: CString): void

pub func OutputStream_op__lshift14(this: OutputStream, val: string): OutputStream {
  OutputStream_appendString(this, __construct115((val)))
  return this
}

pub struct Slice7 {
  - data: &string
  - len: u64
}

pub func Slice7_op__init(this: &Slice[string], data: &string, len: u64) {
  this.data = data
  this.len = len
}

pub extern func __cxy_assert(cond: bool, file: string, line: u64, column: u64)

pub func Slice7_op__idx_assign(this: &Slice[string], index: i64, data: string) {
  __cxy_assert(index < this.len, "__builtins.cxy", 559, 9)
  this.data.[index] = data
}

pub func Slice7_op__idx(this: &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 565, 9)
  return this.data.[index]
}

pub func Slice7_op__idx(this: const &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 571, 9)
  return this.data.[index]
}

pub func Slice7_op__range(this: const &Slice[string]): __Closure12 {
  var i: i32 = 0
  return __Closure12{i = i, len = this.len, data = this.data}
}

pub func Slice7_op__hash(this: const &Slice[string]): u32 {
  var code: u32 = 16777619
  {
    const i = 0
    while (i != this.len)
    {
      code = hash13(this.data.[i], code)
    }
  }
  return code
}

pub extern func OutputStream_appendChar(this: OutputStream, ch: wchar)

pub extern func OutputStream_appendString(this: OutputStream, s: string): void

pub func Slice7_op__str(this: const &Slice[string], sb: OutputStream) {
  OutputStream_appendChar(sb, '[')
  {
    const i = 0
    while (i != this.len)
    {
      if (i != 0) {
        OutputStream_appendString(sb, ", ")
      }
      OutputStream_op__lshift14(sb, this.data.[i])
    }
  }
  OutputStream_appendChar(sb, ']')
}

func varargs16(...args: (i8, string, wchar, f64)) { }


func add18(...nums: (f32, f64, f64)) {
  var sum: f32 = 0
  sum += nums.0
  sum += nums.1
  sum += nums.2
}

func many17(x: i32, ...rest: (f64, f64)) {
  add18((<f32>x, rest.0, rest.1))
}

func main(args: Slice7) {
  varargs16((10, "Hello", 'c', 2.000600e+03))
  many17(<i32>10, (1.000000e+01, 1.006000e+02))
}

const llvm.global_ctors = [(0, __init, null)]
