pub extern func __init(): void
extern func __smart_ptr_get(ptr: sptr): &void

extern func __smart_ptr_drop(ptr: sptr): void

struct __Optional9 {
  - ok: bool = false
  - val: (string, i32)
}

pub func __Optional9_op__init(this: &__Optional[(string, i32)]) {
  this.ok = false
}

pub func __Optional9_op__init(this: &__Optional[(string, i32)], value: (string, i32)) {
  this.val = value
  this.ok = true
}

pub func __Optional9_op__truthy(this: &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __Optional9_op__deref(this: &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func __Optional9_op__truthy(this: const &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __Optional9_op__deref(this: const &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func Some10(value: (string, i32)): __Optional[(string, i32)] {
  var s11 = __Optional9{ok = false, val = (null, 0)}
  __Optional9_op__init(&s11, value)
  return s11
}

pub func None12(): __Optional[(string, i32)] {
  var s13 = __Optional9{ok = false, val = (null, 0)}
  __Optional9_op__init(&s13)
  return s13
}

struct __Closure14 {
  - i: i32
  - len: u64
  - data: &string
}

pub func __Closure14_op__call(this: &__Closure14): __Optional9 {
  if (this.i < this.len) {
    return Some10((this.data.[this.i], this.i++))
  }
  return None12()
}

pub extern func hash_fnv1a_string(h: Hash, str: string): u32

pub func hash15(val: string, init: Hash = 16777619): Hash {
  return hash_fnv1a_string(init, val)
}

pub extern func CString_op__init(this: &CString, s: string)

pub extern func OutputStream_appendString(this: OutputStream, s: CString): void

pub func OutputStream_op__lshift16(this: OutputStream, val: string): OutputStream {
  var s17 = CString{s = null}
  CString_op__init(&s17, val)
  OutputStream_appendString(this, s17)
  return this
}

pub struct Slice8 {
  - data: &string
  - len: u64
}

pub func Slice8_op__init(this: &Slice[string], data: &string, len: u64) {
  this.data = data
  this.len = len
}

pub extern func __cxy_assert(cond: bool, file: string, line: u64, column: u64)

pub func Slice8_op__idx_assign(this: &Slice[string], index: i64, data: string) {
  __cxy_assert(index < this.len, "__builtins.cxy", 559, 9)
  this.data.[index] = data
}

pub func Slice8_op__idx(this: &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 565, 9)
  return this.data.[index]
}

pub func Slice8_op__idx(this: const &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 571, 9)
  return this.data.[index]
}

pub func Slice8_op__range(this: const &Slice[string]): __Closure14 {
  var i: i32 = 0
  return __Closure14{i = i, len = this.len, data = this.data}
}

pub func Slice8_op__hash(this: const &Slice[string]): u32 {
  var code: u32 = 16777619
  {
    const i = 0
    while (i != this.len)
    {
      code = hash15(this.data.[i], code)
    }
  }
  return code
}

pub extern func OutputStream_appendChar(this: OutputStream, ch: wchar)

pub extern func OutputStream_appendString(this: OutputStream, s: string): void

pub func Slice8_op__str(this: const &Slice[string], sb: OutputStream) {
  OutputStream_appendChar(sb, '[')
  {
    const i = 0
    while (i != this.len)
    {
      if (i != 0) {
        OutputStream_appendString(sb, ", ")
      }
      OutputStream_op__lshift16(sb, this.data.[i])
    }
  }
  OutputStream_appendChar(sb, ']')
}

func varargs18(...args: (i8, string, wchar, f64)) { }


func add20(...nums: (f32, f64, f64)) {
  var sum: f32 = 0
  sum += nums.0
  sum += nums.1
  sum += nums.2
}

func many19(x: i32, ...rest: (f64, f64)) {
  add20((<f32>x, rest.0, rest.1))
}

func main(args: Slice8) {
  varargs18((10, "Hello", 'c', 2.000600e+03))
  many19(<i32>10, (1.000000e+01, 1.006000e+02))
}

const llvm.global_ctors = [(0, __init, null)]
