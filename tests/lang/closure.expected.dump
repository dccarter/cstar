

func closureArg0(fn: (&void, func(_: &void) -> void)) {
  fn.1(fn.0)
}

func closureArg1(msg: string, fn: (&void, func(_: &void, msg: string) -> void)) {
  fn.1(fn.0, msg)
}

func closureArg2(fn: (&void, func(_: &void, msg: string) -> void)) {
  closureArg1("hello", fn)
}

struct __Optional11 {
  - ok: bool = false
  - val: (string, i32)
}

pub func __Optional11_op__init(this: &__Optional[(string, i32)]) {
  this.ok = false
}

pub func __Optional11_op__init(this: &__Optional[(string, i32)], value: (string, i32)) {
  this.val = value
  this.ok = true
}

pub func __Optional11_op__truthy(this: &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __Optional11_op__deref(this: &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func __Optional11_op__truthy(this: const &__Optional[(string, i32)]): bool {
  return this.ok
}

pub func __Optional11_op__deref(this: const &__Optional[(string, i32)]): (string, i32) {
  return this.val
}

pub func Some12(value: (string, i32)): __Optional[(string, i32)] {
  var s13 = __Optional11{ok = false, val = (null, 0)}
  __Optional11_op__init(&s13, value)
  return s13
}

pub func None14(): __Optional[(string, i32)] {
  var s15 = __Optional11{ok = false, val = (null, 0)}
  __Optional11_op__init(&s15)
  return s15
}

struct __Closure16 {
  - i: i32
  - len: u64
  - data: &string
}

pub func __Closure16_op__call(this: &__Closure16): __Optional11 {
  if (this.i < this.len) {
    return Some12((this.data.[this.i], this.i++))
  }
  return None14()
}


pub func hash17(val: string, init: Hash = 16777619): Hash {
  return hash_fnv1a_string(init, val)
}



pub func OutputStream_op__lshift18(this: OutputStream, val: string): OutputStream {
  
  var s19 = CString{s = null}
  CString_op__init(&s19, val)
  OutputStream_appendString(this, s19)
  return this
}

pub struct Slice10 {
  - data: &string
  - len: u64
}

pub func Slice10_op__init(this: &Slice[string], data: &string, len: u64) {
  this.data = data
  this.len = len
}


pub func Slice10_op__idx_assign(this: &Slice[string], index: i64, data: string) {
  __cxy_assert(index < this.len, "__builtins.cxy", 552, 9)
  this.data.[index] = data
}

pub func Slice10_op__idx(this: &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 558, 9)
  return this.data.[index]
}

pub func Slice10_op__idx(this: const &Slice[string], index: i64): string {
  __cxy_assert(index < this.len, "__builtins.cxy", 564, 9)
  return this.data.[index]
}

pub func Slice10_op__range(this: const &Slice[string]): __Closure16 {
  var i: i32 = 0
  return __Closure16{i = i, len = this.len, data = this.data}
}

pub func Slice10_op__hash(this: const &Slice[string]): u32 {
  var code: u32 = 16777619
  {
    const i = 0
    while (i != this.len)
    {
      code = hash17(this.data.[i], code)
    }
  }
  return code
}



pub func Slice10_op__str(this: const &Slice[string], sb: OutputStream) {
  OutputStream_appendChar(sb, '[')
  {
    const i = 0
    while (i != this.len)
    {
      if (i != 0) {
        OutputStream_appendString(sb, ", ")
      }
      OutputStream_op__lshift18(sb, this.data.[i])
    }
  }
  OutputStream_appendChar(sb, ']')
}

struct __Closure20{ }

pub func __Closure20_op__call(this: &__Closure20): i8 {
  return 1
}


func __deinit_fwd23(ptr: sptr) {
  String_op__deinit(((ptr : &class String)))
}



pub func allocate22(len: u32 = 0): String {
  var obj: class String
  obj = ((__smart_ptr_alloc(__bc(0, #String), __deinit_fwd23) : class String))
  {
    obj.vtable = &String_vTable
    obj._capacity = 0
    obj._size = 0
    obj._data = null
  }
  return obj
}

struct __Closure24{ }


pub func __Closure24_op__call(this: &__Closure24, name: string): String {
  var s21 = allocate22(<u32>0)
  String_op__init(s21)
  var sb7 = s21
  OutputStream_op__lshift18(OutputStream_op__lshift18(<OutputStream>sb7, "Hello "), name)
  return sb7
}


pub func OutputStream_op__lshift26(this: OutputStream, val: i8): OutputStream {
  
  OutputStream_appendSignedInt(this, <i64>val)
  return this
}

struct __Closure27 {
  - b: string
  - x: i8
}

pub func __Closure27_op__call(this: &__Closure27): String {
  var s25 = allocate22(<u32>0)
  String_op__init(s25)
  var sb8 = s25
  OutputStream_op__lshift26(OutputStream_op__lshift18(OutputStream_op__lshift18(<OutputStream>sb8, this.b), " -> "), this.x)
  return sb8
}

struct __Closure29 {
  - b: string
  - x: i8
}

pub func __Closure29_op__call(this: &__Closure29): String {
  var s28 = allocate22(<u32>0)
  String_op__init(s28)
  var sb9 = s28
  OutputStream_op__lshift26(OutputStream_op__lshift18(OutputStream_op__lshift18(<OutputStream>sb9, this.b), " -> "), this.x)
  return sb9
}

struct __Closure30 {
  - b: string
  - x: i8
}

pub func __Closure30_op__call(this: &__Closure30) {
  const g = __Closure29{b = b, x = x}
}

struct __Closure31{ }

pub func __Closure31_op__call(this: &__Closure31) { }


func __Closure31__fwd(ptr: &void): void => __Closure31_op__call(<&__Closure31>ptr)

struct __Closure32{ }

pub func __Closure32_op__call(this: &__Closure32, msg: string) { }


func __Closure32__fwd(ptr: &void, msg: string): void => __Closure32_op__call(<&__Closure32>ptr, msg)

func main(args: Slice10) {
  const one = __Closure20{}
  __Closure20_op__call(&one)
  __Closure24_op__call(&(__Closure24{}), "User")
  var x = 100
  var b = "Hello"
  __Closure27_op__call(&(__Closure27{b = b, x = x}))
  const f = __Closure30{b = b, x = x}
  closureArg0((<&void>&__Closure31{}, __Closure31__fwd))
  closureArg2((<&void>&__Closure32{}, __Closure32__fwd))
}

const llvm.global_ctors = [(0, __init, null)]
