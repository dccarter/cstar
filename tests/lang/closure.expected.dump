// Cxy dump - source: /Users/dccarter/projects/cxy/tests/lang/closure.cxy

func closureArg0(fn: (&void, func(_: &void) -> void)) {
  fn.1(fn.0)
}

func closureArg1(msg: string, fn: (&void, func(_: &void, msg: string) -> void)) {
  fn.1(fn.0, msg)
}

func closureArg2(fn: (&void, func(_: &void, msg: string) -> void)) {
  closureArg1("hello", fn)
}

struct __Closure6{ }

pub func __Closure6_op__call(this: &__Closure6): i8 {
  return 1
}


pub func allocate8(count: u32 = 0): String {
  return (class String : __cxy_alloc(__bc(0, #String)))
}


pub func String_op__lshift9(this: String, val: string): String {
  String_appendString(this, val)
  return this
}

struct __Closure10{ }


pub func __Closure10_op__call(this: &__Closure10): String {
  return ({
    var sb = ({
      var s7 = allocate8(<u32>0)
      String_op__init(s7)
      s7
    })
    String_op__lshift9(String_op__lshift9(sb, "Hello "), name)
  })
}


pub func String_op__lshift12(this: String, val: i8): String {
  
  String_appendSignedInt(this, <i64>val)
  return this
}

struct __Closure13 {
  - b: string
  - x: i8
}

pub func __Closure13_op__call(this: &__Closure13): String {
  return ({
    var sb = ({
      var s11 = allocate8(<u32>0)
      String_op__init(s11)
      s11
    })
    String_op__lshift12(String_op__lshift9(String_op__lshift9(sb, this.b), " -> "), this.x)
  })
}

struct __Closure15 {
  - b: string
  - x: i8
}

pub func __Closure15_op__call(this: &__Closure15): String {
  return ({
    var sb = ({
      var s14 = allocate8(<u32>0)
      String_op__init(s14)
      s14
    })
    String_op__lshift12(String_op__lshift9(String_op__lshift9(sb, this.b), " -> "), this.x)
  })
}

struct __Closure16 {
  - b: string
  - x: i8
}

pub func __Closure16_op__call(this: &__Closure16) {
  const g = __Closure15{b = b, x = x}
}

struct __Closure17{ }

pub func __Closure17_op__call(this: &__Closure17) { }


func __Closure17__fwd(ptr: &void): void => __Closure17_op__call(<&__Closure17>ptr)

struct __Closure18{ }

pub func __Closure18_op__call(this: &__Closure18) { }


func __Closure18__fwd(ptr: &void, msg: string): void => __Closure18_op__call(<&__Closure18>ptr, msg)

func main(args: [string]) {
  const one = __Closure6{}
  __Closure6_op__call(&one)
  __Closure10_op__call(&(__Closure10{}), "User")
  var x = 100
  var b = "Hello"
  __Closure13_op__call(&(__Closure13{b = b, x = x}))
  const f = __Closure16{b = b, x = x}
  closureArg0((<&void>&__Closure17{}, __Closure17__fwd))
  closureArg2((<&void>&__Closure18{}, __Closure18__fwd))
}
