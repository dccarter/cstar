import { FileServer, Config as FsConfig } from "stdlib/fserver.cxy"
import { Config, Server, Request, Response, Status } from "stdlib/http.cxy"
import { Address } from "stdlib/net.cxy"

import "stdlib/log.cxy"

class Log {
    @static
    - LOG_TAG = "MW_LOG";

    func `init`(){}

    func before(@unused req: &const Request, @unused resp: &Response) {
        DBG!( "Before >>>" << req.method() << " " << req.path() )
    }

    func after(@unused req: &const Request, @unused resp: &Response) {
        DBG!( "<<< After " << req.method() << " " << req.path() )
    }
}

struct Option[T] {
    require!(T.isNumber || T.isBoolean || (T.isString && !T.isClass), "type '{T}' must be a primitive type")
    _value: T? = null;
    desc: __string

    @inline func `init`(desc: string) {
        this.desc = __string(desc)
        #if(T.isBoolean)
            _value = false
    }

    @inline func `init`(desc: string, def: T) {
        this.desc = __string(desc)
        this._value = def
    }

    // This is ok memory management wise since since T is required to be a value type
    @inline func `||`(def: T) => _value.ok? _value.val : def
    @inline const func `!!`() => _value.ok
    @inline func value() => _value
}

@[noinline, optimize(0)]
func start[Ep](ep: &Ep): !void {
    async ep.start()
}

func main(): !void {
     var server = Server[(Log)](Config{address: Address("0.0.0.0", 8004)});
     @unused var fs = FileServer(&server, FsConfig{enableSendFile: true});

     var api = Server[()](Config{address: Address("0.0.0.0", 8005)});
     api("/hello", (@unused req: &const Request, resp: &Response) => {
         resp.body() << "Hello, World!"
     })

     api("/quit", (@unused req: &const Request, @unused resp: &Response) => {
         server.stop()
         api.stop()
     })


     start(&api)
     server.start()
}
